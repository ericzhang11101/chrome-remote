/*! For license information please see content.js.LICENSE.txt */
(()=>{var e={6931:(e,t,n)=>{"use strict";var r=n(272),o=n.n(r),i=n(2609);n.n(i)()(o()).push([e.id,".hover-style {\n    border: 2px solid red !important;\n    border-radius: 5px;\n}","",{version:3,sources:["webpack://./styles/style.css"],names:[],mappings:"AAAA;IACI,gCAAgC;IAChC,kBAAkB;AACtB",sourcesContent:[".hover-style {\n    border: 2px solid red !important;\n    border-radius: 5px;\n}"],sourceRoot:""}])},2609:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);r&&s[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},272:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},5130:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(7123)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},7123:(e,t,n)=>{e.exports=function(e){function t(e){let n,o,i,s=null;function a(...e){if(!a.enabled)return;const r=a,o=Number(new Date),i=o-(n||o);r.diff=i,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";s++;const i=t.formatters[o];if("function"==typeof i){const t=e[s];n=i.call(r,t),e.splice(s,1),s--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=r,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(o!==t.namespaces&&(o=t.namespaces,i=t.enabled(e)),i),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(1378),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},1442:(e,t,n)=>{var r;!function(o){var i,s,a,c,u,l,p,d,f,h,g,y,v,m,b,x,w,C,k,T="sizzle"+1*new Date,S=o.document,E=0,A=0,_=de(),j=de(),O=de(),N=de(),P=function(e,t){return e===t&&(g=!0),0},R={}.hasOwnProperty,L=[],D=L.pop,q=L.push,B=L.push,F=L.slice,M=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},H="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",I="[\\x20\\t\\r\\n\\f]",W="(?:\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",$="\\["+I+"*("+W+")(?:"+I+"*([*^$|!~]?=)"+I+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+W+"))|)"+I+"*\\]",z=":("+W+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+$+")*)|.*)\\)|)",U=new RegExp(I+"+","g"),G=new RegExp("^"+I+"+|((?:^|[^\\\\])(?:\\\\.)*)"+I+"+$","g"),V=new RegExp("^"+I+"*,"+I+"*"),X=new RegExp("^"+I+"*([>+~]|"+I+")"+I+"*"),Y=new RegExp(I+"|>"),K=new RegExp(z),J=new RegExp("^"+W+"$"),Q={ID:new RegExp("^#("+W+")"),CLASS:new RegExp("^\\.("+W+")"),TAG:new RegExp("^("+W+"|[*])"),ATTR:new RegExp("^"+$),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+I+"*(even|odd|(([+-]|)(\\d*)n|)"+I+"*(?:([+-]|)"+I+"*(\\d+)|))"+I+"*\\)|)","i"),bool:new RegExp("^(?:"+H+")$","i"),needsContext:new RegExp("^"+I+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+I+"*((?:-\\d)?\\d*)"+I+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,ee=/^(?:input|select|textarea|button)$/i,te=/^h\d$/i,ne=/^[^{]+\{\s*\[native \w/,re=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,oe=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+I+"?|\\\\([^\\r\\n\\f])","g"),se=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ae=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ce=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ue=function(){y()},le=Te((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{B.apply(L=F.call(S.childNodes),S.childNodes),L[S.childNodes.length].nodeType}catch(e){B={apply:L.length?function(e,t){q.apply(e,F.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function pe(e,t,n,r){var o,i,a,c,u,p,f,h=t&&t.ownerDocument,g=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==g&&9!==g&&11!==g)return n;if(!r&&(y(t),t=t||v,b)){if(11!==g&&(u=re.exec(e)))if(o=u[1]){if(9===g){if(!(a=t.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(h&&(a=h.getElementById(o))&&k(t,a)&&a.id===o)return n.push(a),n}else{if(u[2])return B.apply(n,t.getElementsByTagName(e)),n;if((o=u[3])&&s.getElementsByClassName&&t.getElementsByClassName)return B.apply(n,t.getElementsByClassName(o)),n}if(s.qsa&&!N[e+" "]&&(!x||!x.test(e))&&(1!==g||"object"!==t.nodeName.toLowerCase())){if(f=e,h=t,1===g&&(Y.test(e)||X.test(e))){for((h=oe.test(e)&&we(t.parentNode)||t)===t&&s.scope||((c=t.getAttribute("id"))?c=c.replace(ae,ce):t.setAttribute("id",c=T)),i=(p=l(e)).length;i--;)p[i]=(c?"#"+c:":scope")+" "+ke(p[i]);f=p.join(",")}try{if(s.cssSupportsSelector&&!CSS.supports("selector(:is("+f+"))"))throw new Error;return B.apply(n,h.querySelectorAll(f)),n}catch(t){N(e,!0)}finally{c===T&&t.removeAttribute("id")}}}return d(e.replace(G,"$1"),t,n,r)}function de(){var e=[];return function t(n,r){return e.push(n+" ")>a.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function fe(e){return e[T]=!0,e}function he(e){var t=v.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ge(e,t){for(var n=e.split("|"),r=n.length;r--;)a.attrHandle[n[r]]=t}function ye(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ve(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function me(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function be(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&le(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function xe(e){return fe((function(t){return t=+t,fe((function(n,r){for(var o,i=e([],n.length,t),s=i.length;s--;)n[o=i[s]]&&(n[o]=!(r[o]=n[o]))}))}))}function we(e){return e&&void 0!==e.getElementsByTagName&&e}for(i in s=pe.support={},u=pe.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!Z.test(t||n&&n.nodeName||"HTML")},y=pe.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:S;return r!=v&&9===r.nodeType&&r.documentElement?(m=(v=r).documentElement,b=!u(v),S!=v&&(n=v.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",ue,!1):n.attachEvent&&n.attachEvent("onunload",ue)),s.scope=he((function(e){return m.appendChild(e).appendChild(v.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),s.cssSupportsSelector=he((function(){return CSS.supports("selector(*)")&&v.querySelectorAll(":is(:jqfake)")&&!CSS.supports("selector(:is(*,:jqfake))")})),s.attributes=he((function(e){return e.className="i",!e.getAttribute("className")})),s.getElementsByTagName=he((function(e){return e.appendChild(v.createComment("")),!e.getElementsByTagName("*").length})),s.getElementsByClassName=ne.test(v.getElementsByClassName),s.getById=he((function(e){return m.appendChild(e).id=T,!v.getElementsByName||!v.getElementsByName(T).length})),s.getById?(a.filter.ID=function(e){var t=e.replace(ie,se);return function(e){return e.getAttribute("id")===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&b){var n=t.getElementById(e);return n?[n]:[]}}):(a.filter.ID=function(e){var t=e.replace(ie,se);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},a.find.ID=function(e,t){if(void 0!==t.getElementById&&b){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),a.find.TAG=s.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):s.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},a.find.CLASS=s.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&b)return t.getElementsByClassName(e)},w=[],x=[],(s.qsa=ne.test(v.querySelectorAll))&&(he((function(e){var t;m.appendChild(e).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&x.push("[*^$]="+I+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||x.push("\\["+I+"*(?:value|"+H+")"),e.querySelectorAll("[id~="+T+"-]").length||x.push("~="),(t=v.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||x.push("\\["+I+"*name"+I+"*="+I+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||x.push(":checked"),e.querySelectorAll("a#"+T+"+*").length||x.push(".#.+[+~]"),e.querySelectorAll("\\\f"),x.push("[\\r\\n\\f]")})),he((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=v.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&x.push("name"+I+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&x.push(":enabled",":disabled"),m.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&x.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),x.push(",.*:")}))),(s.matchesSelector=ne.test(C=m.matches||m.webkitMatchesSelector||m.mozMatchesSelector||m.oMatchesSelector||m.msMatchesSelector))&&he((function(e){s.disconnectedMatch=C.call(e,"*"),C.call(e,"[s!='']:x"),w.push("!=",z)})),s.cssSupportsSelector||x.push(":has"),x=x.length&&new RegExp(x.join("|")),w=w.length&&new RegExp(w.join("|")),t=ne.test(m.compareDocumentPosition),k=t||ne.test(m.contains)?function(e,t){var n=9===e.nodeType&&e.documentElement||e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},P=t?function(e,t){if(e===t)return g=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!s.sortDetached&&t.compareDocumentPosition(e)===n?e==v||e.ownerDocument==S&&k(S,e)?-1:t==v||t.ownerDocument==S&&k(S,t)?1:h?M(h,e)-M(h,t):0:4&n?-1:1)}:function(e,t){if(e===t)return g=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,s=[e],a=[t];if(!o||!i)return e==v?-1:t==v?1:o?-1:i?1:h?M(h,e)-M(h,t):0;if(o===i)return ye(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?ye(s[r],a[r]):s[r]==S?-1:a[r]==S?1:0},v):v},pe.matches=function(e,t){return pe(e,null,null,t)},pe.matchesSelector=function(e,t){if(y(e),s.matchesSelector&&b&&!N[t+" "]&&(!w||!w.test(t))&&(!x||!x.test(t)))try{var n=C.call(e,t);if(n||s.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){N(t,!0)}return pe(t,v,null,[e]).length>0},pe.contains=function(e,t){return(e.ownerDocument||e)!=v&&y(e),k(e,t)},pe.attr=function(e,t){(e.ownerDocument||e)!=v&&y(e);var n=a.attrHandle[t.toLowerCase()],r=n&&R.call(a.attrHandle,t.toLowerCase())?n(e,t,!b):void 0;return void 0!==r?r:s.attributes||!b?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},pe.escape=function(e){return(e+"").replace(ae,ce)},pe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},pe.uniqueSort=function(e){var t,n=[],r=0,o=0;if(g=!s.detectDuplicates,h=!s.sortStable&&e.slice(0),e.sort(P),g){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return h=null,e},c=pe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=c(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=c(t);return n},a=pe.selectors={cacheLength:50,createPseudo:fe,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,se),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,se),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||pe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&pe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&K.test(n)&&(t=l(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,se).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=_[e+" "];return t||(t=new RegExp("(^|"+I+")"+e+"("+I+"|$)"))&&_(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=pe.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(U," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,c){var u,l,p,d,f,h,g=i!==s?"nextSibling":"previousSibling",y=t.parentNode,v=a&&t.nodeName.toLowerCase(),m=!c&&!a,b=!1;if(y){if(i){for(;g;){for(d=t;d=d[g];)if(a?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?y.firstChild:y.lastChild],s&&m){for(b=(f=(u=(l=(p=(d=y)[T]||(d[T]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===E&&u[1])&&u[2],d=f&&y.childNodes[f];d=++f&&d&&d[g]||(b=f=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){l[e]=[E,f,b];break}}else if(m&&(b=f=(u=(l=(p=(d=t)[T]||(d[T]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]||[])[0]===E&&u[1]),!1===b)for(;(d=++f&&d&&d[g]||(b=f=0)||h.pop())&&((a?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(m&&((l=(p=d[T]||(d[T]={}))[d.uniqueID]||(p[d.uniqueID]={}))[e]=[E,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,r=a.pseudos[e]||a.setFilters[e.toLowerCase()]||pe.error("unsupported pseudo: "+e);return r[T]?r(t):r.length>1?(n=[e,e,"",t],a.setFilters.hasOwnProperty(e.toLowerCase())?fe((function(e,n){for(var o,i=r(e,t),s=i.length;s--;)e[o=M(e,i[s])]=!(n[o]=i[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:fe((function(e){var t=[],n=[],r=p(e.replace(G,"$1"));return r[T]?fe((function(e,t,n,o){for(var i,s=r(e,null,o,[]),a=e.length;a--;)(i=s[a])&&(e[a]=!(t[a]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:fe((function(e){return function(t){return pe(e,t).length>0}})),contains:fe((function(e){return e=e.replace(ie,se),function(t){return(t.textContent||c(t)).indexOf(e)>-1}})),lang:fe((function(e){return J.test(e||"")||pe.error("unsupported lang: "+e),e=e.replace(ie,se).toLowerCase(),function(t){var n;do{if(n=b?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(e){var t=o.location&&o.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===m},focus:function(e){return e===v.activeElement&&(!v.hasFocus||v.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:be(!1),disabled:be(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!a.pseudos.empty(e)},header:function(e){return te.test(e.nodeName)},input:function(e){return ee.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:xe((function(){return[0]})),last:xe((function(e,t){return[t-1]})),eq:xe((function(e,t,n){return[n<0?n+t:n]})),even:xe((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:xe((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:xe((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:xe((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}},a.pseudos.nth=a.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})a.pseudos[i]=ve(i);for(i in{submit:!0,reset:!0})a.pseudos[i]=me(i);function Ce(){}function ke(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function Te(e,t,n){var r=t.dir,o=t.next,i=o||r,s=n&&"parentNode"===i,a=A++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,o);return!1}:function(t,n,c){var u,l,p,d=[E,a];if(c){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,c))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(l=(p=t[T]||(t[T]={}))[t.uniqueID]||(p[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((u=l[i])&&u[0]===E&&u[1]===a)return d[2]=u[2];if(l[i]=d,d[2]=e(t,n,c))return!0}return!1}}function Se(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,o){for(var i,s=[],a=0,c=e.length,u=null!=t;a<c;a++)(i=e[a])&&(n&&!n(i,r,o)||(s.push(i),u&&t.push(a)));return s}function Ae(e,t,n,r,o,i){return r&&!r[T]&&(r=Ae(r)),o&&!o[T]&&(o=Ae(o,i)),fe((function(i,s,a,c){var u,l,p,d=[],f=[],h=s.length,g=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)pe(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),y=!e||!i&&t?g:Ee(g,d,e,a,c),v=n?o||(i?e:h||r)?[]:s:y;if(n&&n(y,v,a,c),r)for(u=Ee(v,f),r(u,[],a,c),l=u.length;l--;)(p=u[l])&&(v[f[l]]=!(y[f[l]]=p));if(i){if(o||e){if(o){for(u=[],l=v.length;l--;)(p=v[l])&&u.push(y[l]=p);o(null,v=[],u,c)}for(l=v.length;l--;)(p=v[l])&&(u=o?M(i,p):d[l])>-1&&(i[u]=!(s[u]=p))}}else v=Ee(v===s?v.splice(h,v.length):v),o?o(null,s,v,c):B.apply(s,v)}))}function _e(e){for(var t,n,r,o=e.length,i=a.relative[e[0].type],s=i||a.relative[" "],c=i?1:0,u=Te((function(e){return e===t}),s,!0),l=Te((function(e){return M(t,e)>-1}),s,!0),p=[function(e,n,r){var o=!i&&(r||n!==f)||((t=n).nodeType?u(e,n,r):l(e,n,r));return t=null,o}];c<o;c++)if(n=a.relative[e[c].type])p=[Te(Se(p),n)];else{if((n=a.filter[e[c].type].apply(null,e[c].matches))[T]){for(r=++c;r<o&&!a.relative[e[r].type];r++);return Ae(c>1&&Se(p),c>1&&ke(e.slice(0,c-1).concat({value:" "===e[c-2].type?"*":""})).replace(G,"$1"),n,c<r&&_e(e.slice(c,r)),r<o&&_e(e=e.slice(r)),r<o&&ke(e))}p.push(n)}return Se(p)}Ce.prototype=a.filters=a.pseudos,a.setFilters=new Ce,l=pe.tokenize=function(e,t){var n,r,o,i,s,c,u,l=j[e+" "];if(l)return t?0:l.slice(0);for(s=e,c=[],u=a.preFilter;s;){for(i in n&&!(r=V.exec(s))||(r&&(s=s.slice(r[0].length)||s),c.push(o=[])),n=!1,(r=X.exec(s))&&(n=r.shift(),o.push({value:n,type:r[0].replace(G," ")}),s=s.slice(n.length)),a.filter)!(r=Q[i].exec(s))||u[i]&&!(r=u[i](r))||(n=r.shift(),o.push({value:n,type:i,matches:r}),s=s.slice(n.length));if(!n)break}return t?s.length:s?pe.error(e):j(e,c).slice(0)},p=pe.compile=function(e,t){var n,r=[],o=[],i=O[e+" "];if(!i){for(t||(t=l(e)),n=t.length;n--;)(i=_e(t[n]))[T]?r.push(i):o.push(i);i=O(e,function(e,t){var n=t.length>0,r=e.length>0,o=function(o,i,s,c,u){var l,p,d,h=0,g="0",m=o&&[],x=[],w=f,C=o||r&&a.find.TAG("*",u),k=E+=null==w?1:Math.random()||.1,T=C.length;for(u&&(f=i==v||i||u);g!==T&&null!=(l=C[g]);g++){if(r&&l){for(p=0,i||l.ownerDocument==v||(y(l),s=!b);d=e[p++];)if(d(l,i||v,s)){c.push(l);break}u&&(E=k)}n&&((l=!d&&l)&&h--,o&&m.push(l))}if(h+=g,n&&g!==h){for(p=0;d=t[p++];)d(m,x,i,s);if(o){if(h>0)for(;g--;)m[g]||x[g]||(x[g]=D.call(c));x=Ee(x)}B.apply(c,x),u&&!o&&x.length>0&&h+t.length>1&&pe.uniqueSort(c)}return u&&(E=k,f=w),m};return n?fe(o):o}(o,r)),i.selector=e}return i},d=pe.select=function(e,t,n,r){var o,i,s,c,u,d="function"==typeof e&&e,f=!r&&l(e=d.selector||e);if(n=n||[],1===f.length){if((i=f[0]=f[0].slice(0)).length>2&&"ID"===(s=i[0]).type&&9===t.nodeType&&b&&a.relative[i[1].type]){if(!(t=(a.find.ID(s.matches[0].replace(ie,se),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(o=Q.needsContext.test(e)?0:i.length;o--&&(s=i[o],!a.relative[c=s.type]);)if((u=a.find[c])&&(r=u(s.matches[0].replace(ie,se),oe.test(i[0].type)&&we(t.parentNode)||t))){if(i.splice(o,1),!(e=r.length&&ke(i)))return B.apply(n,r),n;break}}return(d||p(e,f))(r,t,!b,n,!t||oe.test(e)&&we(t.parentNode)||t),n},s.sortStable=T.split("").sort(P).join("")===T,s.detectDuplicates=!!g,y(),s.sortDetached=he((function(e){return 1&e.compareDocumentPosition(v.createElement("fieldset"))})),he((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ge("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),s.attributes&&he((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ge("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),he((function(e){return null==e.getAttribute("disabled")}))||ge(H,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}));var je=o.Sizzle;pe.noConflict=function(){return o.Sizzle===pe&&(o.Sizzle=je),pe},void 0===(r=function(){return pe}.call(t,n,t,e))||(e.exports=r)}(window)},1068:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(7349),n(9143),n(4954),n(8437),n(8955),n(2846),n(6749),n(7225),n(2601),n(3159)],void 0===(o=function(e,t,n,r,o,i,s){"use strict";var a=/%20/g,c=/#.*$/,u=/([?&])_=[^&]*/,l=/^(.*?):[ \t]*([^\r\n]*)$/gm,p=/^(?:GET|HEAD)$/,d=/^\/\//,f={},h={},g="*/".concat("*"),y=t.createElement("a");function v(e){return function(t,o){"string"!=typeof t&&(o=t,t="*");var i,s=0,a=t.toLowerCase().match(r)||[];if(n(o))for(;i=a[s++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(o)):(e[i]=e[i]||[]).push(o)}}function m(t,n,r,o){var i={},s=t===h;function a(c){var u;return i[c]=!0,e.each(t[c]||[],(function(e,t){var c=t(n,r,o);return"string"!=typeof c||s||i[c]?s?!(u=c):void 0:(n.dataTypes.unshift(c),a(c),!1)})),u}return a(n.dataTypes[0])||!i["*"]&&a("*")}function b(t,n){var r,o,i=e.ajaxSettings.flatOptions||{};for(r in n)void 0!==n[r]&&((i[r]?t:o||(o={}))[r]=n[r]);return o&&e.extend(!0,t,o),t}return y.href=o.href,e.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:o.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(o.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":g,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":e.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,n){return n?b(b(t,e.ajaxSettings),n):b(e.ajaxSettings,t)},ajaxPrefilter:v(f),ajaxTransport:v(h),ajax:function(n,v){"object"==typeof n&&(v=n,n=void 0),v=v||{};var b,x,w,C,k,T,S,E,A,_,j=e.ajaxSetup({},v),O=j.context||j,N=j.context&&(O.nodeType||O.jquery)?e(O):e.event,P=e.Deferred(),R=e.Callbacks("once memory"),L=j.statusCode||{},D={},q={},B="canceled",F={readyState:0,getResponseHeader:function(e){var t;if(S){if(!C)for(C={};t=l.exec(w);)C[t[1].toLowerCase()+" "]=(C[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=C[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return S?w:null},setRequestHeader:function(e,t){return null==S&&(e=q[e.toLowerCase()]=q[e.toLowerCase()]||e,D[e]=t),this},overrideMimeType:function(e){return null==S&&(j.mimeType=e),this},statusCode:function(e){var t;if(e)if(S)F.always(e[F.status]);else for(t in e)L[t]=[L[t],e[t]];return this},abort:function(e){var t=e||B;return b&&b.abort(t),M(0,t),this}};if(P.promise(F),j.url=((n||j.url||o.href)+"").replace(d,o.protocol+"//"),j.type=v.method||v.type||j.method||j.type,j.dataTypes=(j.dataType||"*").toLowerCase().match(r)||[""],null==j.crossDomain){T=t.createElement("a");try{T.href=j.url,T.href=T.href,j.crossDomain=y.protocol+"//"+y.host!=T.protocol+"//"+T.host}catch(e){j.crossDomain=!0}}if(j.data&&j.processData&&"string"!=typeof j.data&&(j.data=e.param(j.data,j.traditional)),m(f,j,v,F),S)return F;for(A in(E=e.event&&j.global)&&0==e.active++&&e.event.trigger("ajaxStart"),j.type=j.type.toUpperCase(),j.hasContent=!p.test(j.type),x=j.url.replace(c,""),j.hasContent?j.data&&j.processData&&0===(j.contentType||"").indexOf("application/x-www-form-urlencoded")&&(j.data=j.data.replace(a,"+")):(_=j.url.slice(x.length),j.data&&(j.processData||"string"==typeof j.data)&&(x+=(s.test(x)?"&":"?")+j.data,delete j.data),!1===j.cache&&(x=x.replace(u,"$1"),_=(s.test(x)?"&":"?")+"_="+i.guid+++_),j.url=x+_),j.ifModified&&(e.lastModified[x]&&F.setRequestHeader("If-Modified-Since",e.lastModified[x]),e.etag[x]&&F.setRequestHeader("If-None-Match",e.etag[x])),(j.data&&j.hasContent&&!1!==j.contentType||v.contentType)&&F.setRequestHeader("Content-Type",j.contentType),F.setRequestHeader("Accept",j.dataTypes[0]&&j.accepts[j.dataTypes[0]]?j.accepts[j.dataTypes[0]]+("*"!==j.dataTypes[0]?", "+g+"; q=0.01":""):j.accepts["*"]),j.headers)F.setRequestHeader(A,j.headers[A]);if(j.beforeSend&&(!1===j.beforeSend.call(O,F,j)||S))return F.abort();if(B="abort",R.add(j.complete),F.done(j.success),F.fail(j.error),b=m(h,j,v,F)){if(F.readyState=1,E&&N.trigger("ajaxSend",[F,j]),S)return F;j.async&&j.timeout>0&&(k=window.setTimeout((function(){F.abort("timeout")}),j.timeout));try{S=!1,b.send(D,M)}catch(e){if(S)throw e;M(-1,e)}}else M(-1,"No Transport");function M(t,n,r,o){var i,s,a,c,u,l=n;S||(S=!0,k&&window.clearTimeout(k),b=void 0,w=o||"",F.readyState=t>0?4:0,i=t>=200&&t<300||304===t,r&&(c=function(e,t,n){for(var r,o,i,s,a=e.contents,c=e.dataTypes;"*"===c[0];)c.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in a)if(a[o]&&a[o].test(r)){c.unshift(o);break}if(c[0]in n)i=c[0];else{for(o in n){if(!c[0]||e.converters[o+" "+c[0]]){i=o;break}s||(s=o)}i=i||s}if(i)return i!==c[0]&&c.unshift(i),n[i]}(j,F,r)),!i&&e.inArray("script",j.dataTypes)>-1&&e.inArray("json",j.dataTypes)<0&&(j.converters["text script"]=function(){}),c=function(e,t,n,r){var o,i,s,a,c,u={},l=e.dataTypes.slice();if(l[1])for(s in e.converters)u[s.toLowerCase()]=e.converters[s];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!c&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),c=i,i=l.shift())if("*"===i)i=c;else if("*"!==c&&c!==i){if(!(s=u[c+" "+i]||u["* "+i]))for(o in u)if((a=o.split(" "))[1]===i&&(s=u[c+" "+a[0]]||u["* "+a[0]])){!0===s?s=u[o]:!0!==u[o]&&(i=a[0],l.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+c+" to "+i}}}return{state:"success",data:t}}(j,c,F,i),i?(j.ifModified&&((u=F.getResponseHeader("Last-Modified"))&&(e.lastModified[x]=u),(u=F.getResponseHeader("etag"))&&(e.etag[x]=u)),204===t||"HEAD"===j.type?l="nocontent":304===t?l="notmodified":(l=c.state,s=c.data,i=!(a=c.error))):(a=l,!t&&l||(l="error",t<0&&(t=0))),F.status=t,F.statusText=(n||l)+"",i?P.resolveWith(O,[s,l,F]):P.rejectWith(O,[F,l,a]),F.statusCode(L),L=void 0,E&&N.trigger(i?"ajaxSuccess":"ajaxError",[F,j,i?s:a]),R.fireWith(O,[F,l]),E&&(N.trigger("ajaxComplete",[F,j]),--e.active||e.event.trigger("ajaxStop")))}return F},getJSON:function(t,n,r){return e.get(t,n,r,"json")},getScript:function(t,n){return e.get(t,void 0,n,"script")}}),e.each(["get","post"],(function(t,r){e[r]=function(t,o,i,s){return n(o)&&(s=s||i,i=o,o=void 0),e.ajax(e.extend({url:t,type:r,dataType:s,data:o,success:i},e.isPlainObject(t)&&t))}})),e.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),e}.apply(t,r))||(e.exports=o)},7661:(e,t,n)=>{var r,o;r=[n(9701),n(7349),n(8437),n(8955),n(1068)],void 0===(o=function(e,t,n,r){"use strict";var o=[],i=/(=)\?(?=&|$)|\?\?/;e.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=o.pop()||e.expando+"_"+n.guid++;return this[t]=!0,t}}),e.ajaxPrefilter("json jsonp",(function(n,s,a){var c,u,l,p=!1!==n.jsonp&&(i.test(n.url)?"url":"string"==typeof n.data&&0===(n.contentType||"").indexOf("application/x-www-form-urlencoded")&&i.test(n.data)&&"data");if(p||"jsonp"===n.dataTypes[0])return c=n.jsonpCallback=t(n.jsonpCallback)?n.jsonpCallback():n.jsonpCallback,p?n[p]=n[p].replace(i,"$1"+c):!1!==n.jsonp&&(n.url+=(r.test(n.url)?"&":"?")+n.jsonp+"="+c),n.converters["script json"]=function(){return l||e.error(c+" was not called"),l[0]},n.dataTypes[0]="json",u=window[c],window[c]=function(){l=arguments},a.always((function(){void 0===u?e(window).removeProp(c):window[c]=u,n[c]&&(n.jsonpCallback=s.jsonpCallback,o.push(c)),l&&t(u)&&u(l[0]),l=u=void 0})),"script"}))}.apply(t,r))||(e.exports=o)},6266:(e,t,n)=>{var r,o;r=[n(9701),n(2227),n(7349),n(928),n(1068),n(6784),n(6867),n(9306)],void 0===(o=function(e,t,n){"use strict";e.fn.load=function(r,o,i){var s,a,c,u=this,l=r.indexOf(" ");return l>-1&&(s=t(r.slice(l)),r=r.slice(0,l)),n(o)?(i=o,o=void 0):o&&"object"==typeof o&&(a="POST"),u.length>0&&e.ajax({url:r,type:a||"GET",dataType:"html",data:o}).done((function(t){c=arguments,u.html(s?e("<div>").append(e.parseHTML(t)).find(s):t)})).always(i&&function(e,t){u.each((function(){i.apply(this,c||[e.responseText,t,e])}))}),this}}.apply(t,r))||(e.exports=o)},8634:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(1068)],void 0===(o=function(e,t){"use strict";e.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),e.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return e.globalEval(t),t}}}),e.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),e.ajaxTransport("script",(function(n){var r,o;if(n.crossDomain||n.scriptAttrs)return{send:function(i,s){r=e("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){r.remove(),o=null,e&&s("error"===e.type?404:200,e.type)}),t.head.appendChild(r[0])},abort:function(){o&&o()}}}))}.apply(t,r))||(e.exports=o)},4954:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return window.location}.call(t,n,t,e))||(e.exports=r)},8437:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return{guid:Date.now()}}.call(t,n,t,e))||(e.exports=r)},8955:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/\?/}.call(t,n,t,e))||(e.exports=r)},6342:(e,t,n)=>{var r,o;r=[n(9701),n(610),n(1068)],void 0===(o=function(e,t){"use strict";e.ajaxSettings.xhr=function(){try{return new window.XMLHttpRequest}catch(e){}};var n={0:200,1223:204},r=e.ajaxSettings.xhr();t.cors=!!r&&"withCredentials"in r,t.ajax=r=!!r,e.ajaxTransport((function(e){var o,i;if(t.cors||r&&!e.crossDomain)return{send:function(t,r){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)a.setRequestHeader(s,t[s]);o=function(e){return function(){o&&(o=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?r(0,"error"):r(a.status,a.statusText):r(n[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=o(),i=a.onerror=a.ontimeout=o("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&window.setTimeout((function(){o&&i()}))},o=o("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(o)throw e}},abort:function(){o&&o()}}}))}.apply(t,r))||(e.exports=o)},5161:(e,t,n)=>{var r,o;r=[n(9701),n(6333),n(8055),n(2604),n(5485)],void 0===(o=function(e){"use strict";return e}.apply(t,r))||(e.exports=o)},6333:(e,t,n)=>{var r,o;r=[n(9701),n(7096),n(3578),n(7083),n(9143),n(9306)],void 0===(o=function(e,t,n,r,o){"use strict";var i,s=e.expr.attrHandle;e.fn.extend({attr:function(n,r){return t(this,e.attr,n,r,arguments.length>1)},removeAttr:function(t){return this.each((function(){e.removeAttr(this,t)}))}}),e.extend({attr:function(t,n,r){var o,s,a=t.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===t.getAttribute?e.prop(t,n,r):(1===a&&e.isXMLDoc(t)||(s=e.attrHooks[n.toLowerCase()]||(e.expr.match.bool.test(n)?i:void 0)),void 0!==r?null===r?void e.removeAttr(t,n):s&&"set"in s&&void 0!==(o=s.set(t,r,n))?o:(t.setAttribute(n,r+""),r):s&&"get"in s&&null!==(o=s.get(t,n))?o:null==(o=e.find.attr(t,n))?void 0:o)},attrHooks:{type:{set:function(e,t){if(!r.radioValue&&"radio"===t&&n(e,"input")){var o=e.value;return e.setAttribute("type",t),o&&(e.value=o),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(o);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),i={set:function(t,n,r){return!1===n?e.removeAttr(t,r):t.setAttribute(r,r),r}},e.each(e.expr.match.bool.source.match(/\w+/g),(function(t,n){var r=s[n]||e.find.attr;s[n]=function(e,t,n){var o,i,a=t.toLowerCase();return n||(i=s[a],s[a]=o,o=null!=r(e,t,n)?a:null,s[a]=i),o}}))}.apply(t,r))||(e.exports=o)},2604:(e,t,n)=>{var r,o;r=[n(9701),n(2227),n(7349),n(9143),n(8513),n(2846)],void 0===(o=function(e,t,n,r,o){"use strict";function i(e){return e.getAttribute&&e.getAttribute("class")||""}function s(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(r)||[]}e.fn.extend({addClass:function(r){var o,a,c,u,l,p;return n(r)?this.each((function(t){e(this).addClass(r.call(this,t,i(this)))})):(o=s(r)).length?this.each((function(){if(c=i(this),a=1===this.nodeType&&" "+t(c)+" "){for(l=0;l<o.length;l++)u=o[l],a.indexOf(" "+u+" ")<0&&(a+=u+" ");p=t(a),c!==p&&this.setAttribute("class",p)}})):this},removeClass:function(r){var o,a,c,u,l,p;return n(r)?this.each((function(t){e(this).removeClass(r.call(this,t,i(this)))})):arguments.length?(o=s(r)).length?this.each((function(){if(c=i(this),a=1===this.nodeType&&" "+t(c)+" "){for(l=0;l<o.length;l++)for(u=o[l];a.indexOf(" "+u+" ")>-1;)a=a.replace(" "+u+" "," ");p=t(a),c!==p&&this.setAttribute("class",p)}})):this:this.attr("class","")},toggleClass:function(t,r){var a,c,u,l,p=typeof t,d="string"===p||Array.isArray(t);return n(t)?this.each((function(n){e(this).toggleClass(t.call(this,n,i(this),r),r)})):"boolean"==typeof r&&d?r?this.addClass(t):this.removeClass(t):(a=s(t),this.each((function(){if(d)for(l=e(this),u=0;u<a.length;u++)c=a[u],l.hasClass(c)?l.removeClass(c):l.addClass(c);else void 0!==t&&"boolean"!==p||((c=i(this))&&o.set(this,"__className__",c),this.setAttribute&&this.setAttribute("class",c||!1===t?"":o.get(this,"__className__")||""))})))},hasClass:function(e){var n,r,o=0;for(n=" "+e+" ";r=this[o++];)if(1===r.nodeType&&(" "+t(i(r))+" ").indexOf(n)>-1)return!0;return!1}})}.apply(t,r))||(e.exports=o)},8055:(e,t,n)=>{var r,o;r=[n(9701),n(7096),n(7083),n(9306)],void 0===(o=function(e,t,n){"use strict";var r=/^(?:input|select|textarea|button)$/i,o=/^(?:a|area)$/i;e.fn.extend({prop:function(n,r){return t(this,e.prop,n,r,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[e.propFix[t]||t]}))}}),e.extend({prop:function(t,n,r){var o,i,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&e.isXMLDoc(t)||(n=e.propFix[n]||n,i=e.propHooks[n]),void 0!==r?i&&"set"in i&&void 0!==(o=i.set(t,r,n))?o:t[n]=r:i&&"get"in i&&null!==(o=i.get(t,n))?o:t[n]},propHooks:{tabIndex:{get:function(t){var n=e.find.attr(t,"tabindex");return n?parseInt(n,10):r.test(t.nodeName)||o.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),n.optSelected||(e.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),e.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){e.propFix[this.toLowerCase()]=this}))}.apply(t,r))||(e.exports=o)},7083:(e,t,n)=>{var r,o;r=[n(4799),n(610)],void 0===(o=function(e,t){"use strict";var n,r;return n=e.createElement("input"),r=e.createElement("select").appendChild(e.createElement("option")),n.type="checkbox",t.checkOn=""!==n.value,t.optSelected=r.selected,(n=e.createElement("input")).value="t",n.type="radio",t.radioValue="t"===n.value,t}.apply(t,r))||(e.exports=o)},5485:(e,t,n)=>{var r,o;r=[n(9701),n(2227),n(7083),n(3578),n(7349),n(2846)],void 0===(o=function(e,t,n,r,o){"use strict";var i=/\r/g;e.fn.extend({val:function(t){var n,r,s,a=this[0];return arguments.length?(s=o(t),this.each((function(r){var o;1===this.nodeType&&(null==(o=s?t.call(this,r,e(this).val()):t)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=e.map(o,(function(e){return null==e?"":e+""}))),(n=e.valHooks[this.type]||e.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,o,"value")||(this.value=o))}))):a?(n=e.valHooks[a.type]||e.valHooks[a.nodeName.toLowerCase()])&&"get"in n&&void 0!==(r=n.get(a,"value"))?r:"string"==typeof(r=a.value)?r.replace(i,""):null==r?"":r:void 0}}),e.extend({valHooks:{option:{get:function(n){var r=e.find.attr(n,"value");return null!=r?r:t(e.text(n))}},select:{get:function(t){var n,o,i,s=t.options,a=t.selectedIndex,c="select-one"===t.type,u=c?null:[],l=c?a+1:s.length;for(i=a<0?l:c?a:0;i<l;i++)if(((o=s[i]).selected||i===a)&&!o.disabled&&(!o.parentNode.disabled||!r(o.parentNode,"optgroup"))){if(n=e(o).val(),c)return n;u.push(n)}return u},set:function(t,n){for(var r,o,i=t.options,s=e.makeArray(n),a=i.length;a--;)((o=i[a]).selected=e.inArray(e.valHooks.option.get(o),s)>-1)&&(r=!0);return r||(t.selectedIndex=-1),s}}}}),e.each(["radio","checkbox"],(function(){e.valHooks[this]={set:function(t,n){if(Array.isArray(n))return t.checked=e.inArray(e(t).val(),n)>-1}},n.checkOn||(e.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}))}.apply(t,r))||(e.exports=o)},8202:(e,t,n)=>{var r,o;r=[n(9701),n(7138),n(7349),n(9143)],void 0===(o=function(e,t,n,r){"use strict";return e.Callbacks=function(o){o="string"==typeof o?function(t){var n={};return e.each(t.match(r)||[],(function(e,t){n[t]=!0})),n}(o):e.extend({},o);var i,s,a,c,u=[],l=[],p=-1,d=function(){for(c=c||o.once,a=i=!0;l.length;p=-1)for(s=l.shift();++p<u.length;)!1===u[p].apply(s[0],s[1])&&o.stopOnFalse&&(p=u.length,s=!1);o.memory||(s=!1),i=!1,c&&(u=s?[]:"")},f={add:function(){return u&&(s&&!i&&(p=u.length-1,l.push(s)),function r(i){e.each(i,(function(e,i){n(i)?o.unique&&f.has(i)||u.push(i):i&&i.length&&"string"!==t(i)&&r(i)}))}(arguments),s&&!i&&d()),this},remove:function(){return e.each(arguments,(function(t,n){for(var r;(r=e.inArray(n,u,r))>-1;)u.splice(r,1),r<=p&&p--})),this},has:function(t){return t?e.inArray(t,u)>-1:u.length>0},empty:function(){return u&&(u=[]),this},disable:function(){return c=l=[],u=s="",this},disabled:function(){return!u},lock:function(){return c=l=[],s||i||(u=s=""),this},locked:function(){return!!c},fireWith:function(e,t){return c||(t=[e,(t=t||[]).slice?t.slice():t],l.push(t),i||d()),this},fire:function(){return f.fireWith(this,arguments),this},fired:function(){return!!a}};return f},e}.apply(t,r))||(e.exports=o)},9701:(e,t,n)=>{var r,o;r=[n(7692),n(4947),n(3764),n(1759),n(6336),n(429),n(3967),n(2203),n(9187),n(4234),n(3221),n(610),n(7349),n(3743),n(318),n(7138)],void 0===(o=function(e,t,n,r,o,i,s,a,c,u,l,p,d,f,h,g){"use strict";var y="3.6.3",v=function(e,t){return new v.fn.init(e,t)};function m(e){var t=!!e&&"length"in e&&e.length,n=g(e);return!d(e)&&!f(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}return v.fn=v.prototype={jquery:y,constructor:v,length:0,toArray:function(){return n.call(this)},get:function(e){return null==e?n.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=v.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return v.each(this,e)},map:function(e){return this.pushStack(v.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(n.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(v.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(v.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:e.sort,splice:e.splice},v.extend=v.fn.extend=function(){var e,t,n,r,o,i,s=arguments[0]||{},a=1,c=arguments.length,u=!1;for("boolean"==typeof s&&(u=s,s=arguments[a]||{},a++),"object"==typeof s||d(s)||(s={}),a===c&&(s=this,a--);a<c;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(u&&r&&(v.isPlainObject(r)||(o=Array.isArray(r)))?(n=s[t],i=o&&!Array.isArray(n)?[]:o||v.isPlainObject(n)?n:{},o=!1,s[t]=v.extend(u,i,r)):void 0!==r&&(s[t]=r));return s},v.extend({expando:"jQuery"+(y+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var n,r;return!(!e||"[object Object]"!==a.call(e)||(n=t(e))&&("function"!=typeof(r=c.call(n,"constructor")&&n.constructor)||u.call(r)!==l))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){h(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(m(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(m(Object(e))?v.merge(n,"string"==typeof e?[e]:e):o.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:i.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,s=!n;o<i;o++)!t(e[o],o)!==s&&r.push(e[o]);return r},map:function(e,t,n){var o,i,s=0,a=[];if(m(e))for(o=e.length;s<o;s++)null!=(i=t(e[s],s,n))&&a.push(i);else for(s in e)null!=(i=t(e[s],s,n))&&a.push(i);return r(a)},guid:1,support:p}),"function"==typeof Symbol&&(v.fn[Symbol.iterator]=e[Symbol.iterator]),v.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){s["[object "+t+"]"]=t.toLowerCase()})),v}.apply(t,r))||(e.exports=o)},318:(e,t,n)=>{var r,o;r=[n(4799)],void 0===(o=function(e){"use strict";var t={type:!0,src:!0,nonce:!0,noModule:!0};return function(n,r,o){var i,s,a=(o=o||e).createElement("script");if(a.text=n,r)for(i in t)(s=r[i]||r.getAttribute&&r.getAttribute(i))&&a.setAttribute(i,s);o.head.appendChild(a).parentNode.removeChild(a)}}.apply(t,r))||(e.exports=o)},7096:(e,t,n)=>{var r,o;r=[n(9701),n(7138),n(7349)],void 0===(o=function(e,t,n){"use strict";var r=function(o,i,s,a,c,u,l){var p=0,d=o.length,f=null==s;if("object"===t(s))for(p in c=!0,s)r(o,i,p,s[p],!0,u,l);else if(void 0!==a&&(c=!0,n(a)||(l=!0),f&&(l?(i.call(o,a),i=null):(f=i,i=function(t,n,r){return f.call(e(t),r)})),i))for(;p<d;p++)i(o[p],s,l?a:a.call(o[p],p,i(o[p],s)));return c?o:f?i.call(o):d?i(o[0],s):u};return r}.apply(t,r))||(e.exports=o)},6570:(e,t)=>{var n;void 0===(n=function(){"use strict";var e=/^-ms-/,t=/-([a-z])/g;function n(e,t){return t.toUpperCase()}return function(r){return r.replace(e,"ms-").replace(t,n)}}.apply(t,[]))||(e.exports=n)},2846:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(7349),n(1046),n(7717)],void 0===(o=function(e,t,n,r){"use strict";var o,i=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,s=e.fn.init=function(s,a,c){var u,l;if(!s)return this;if(c=c||o,"string"==typeof s){if(!(u="<"===s[0]&&">"===s[s.length-1]&&s.length>=3?[null,s,null]:i.exec(s))||!u[1]&&a)return!a||a.jquery?(a||c).find(s):this.constructor(a).find(s);if(u[1]){if(a=a instanceof e?a[0]:a,e.merge(this,e.parseHTML(u[1],a&&a.nodeType?a.ownerDocument||a:t,!0)),r.test(u[1])&&e.isPlainObject(a))for(u in a)n(this[u])?this[u](a[u]):this.attr(u,a[u]);return this}return(l=t.getElementById(u[2]))&&(this[0]=l,this.length=1),this}return s.nodeType?(this[0]=s,this.length=1,this):n(s)?void 0!==c.ready?c.ready(s):s(e):e.makeArray(s,this)};return s.prototype=e.fn,o=e(t),s}.apply(t,r))||(e.exports=o)},7282:(e,t,n)=>{var r,o;r=[n(9701),n(8128),n(9306)],void 0===(o=function(e,t){"use strict";var n=function(t){return e.contains(t.ownerDocument,t)},r={composed:!0};return t.getRootNode&&(n=function(t){return e.contains(t.ownerDocument,t)||t.getRootNode(r)===t.ownerDocument}),n}.apply(t,r))||(e.exports=o)},3578:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}}.call(t,n,t,e))||(e.exports=r)},928:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(1046),n(8928),n(1810)],void 0===(o=function(e,t,n,r,o){"use strict";return e.parseHTML=function(i,s,a){return"string"!=typeof i?[]:("boolean"==typeof s&&(a=s,s=!1),s||(o.createHTMLDocument?((c=(s=t.implementation.createHTMLDocument("")).createElement("base")).href=t.location.href,s.head.appendChild(c)):s=t),l=!a&&[],(u=n.exec(i))?[s.createElement(u[1])]:(u=r([i],s,l),l&&l.length&&e(l).remove(),e.merge([],u.childNodes)));var c,u,l},e.parseHTML}.apply(t,r))||(e.exports=o)},6749:(e,t,n)=>{var r,o;r=[n(9701)],void 0===(o=function(e){"use strict";return e.parseXML=function(t){var n,r;if(!t||"string"!=typeof t)return null;try{n=(new window.DOMParser).parseFromString(t,"text/xml")}catch(e){}return r=n&&n.getElementsByTagName("parsererror")[0],n&&!r||e.error("Invalid XML: "+(r?e.map(r.childNodes,(function(e){return e.textContent})).join("\n"):t)),n},e.parseXML}.apply(t,r))||(e.exports=o)},3134:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(9123),n(2601)],void 0===(o=function(e,t){"use strict";var n=e.Deferred();function r(){t.removeEventListener("DOMContentLoaded",r),window.removeEventListener("load",r),e.ready()}e.fn.ready=function(t){return n.then(t).catch((function(t){e.readyException(t)})),this},e.extend({isReady:!1,readyWait:1,ready:function(r){(!0===r?--e.readyWait:e.isReady)||(e.isReady=!0,!0!==r&&--e.readyWait>0||n.resolveWith(t,[e]))}}),e.ready.then=n.then,"complete"===t.readyState||"loading"!==t.readyState&&!t.documentElement.doScroll?window.setTimeout(e.ready):(t.addEventListener("DOMContentLoaded",r),window.addEventListener("load",r))}.apply(t,r))||(e.exports=o)},9123:(e,t,n)=>{var r,o;r=[n(9701)],void 0===(o=function(e){"use strict";e.readyException=function(e){window.setTimeout((function(){throw e}))}}.apply(t,r))||(e.exports=o)},2227:(e,t,n)=>{var r,o;r=[n(9143)],void 0===(o=function(e){"use strict";return function(t){return(t.match(e)||[]).join(" ")}}.apply(t,r))||(e.exports=o)},1810:(e,t,n)=>{var r,o;r=[n(4799),n(610)],void 0===(o=function(e,t){"use strict";var n;return t.createHTMLDocument=((n=e.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===n.childNodes.length),t}.apply(t,r))||(e.exports=o)},7138:(e,t,n)=>{var r,o;r=[n(3967),n(2203)],void 0===(o=function(e,t){"use strict";return function(n){return null==n?n+"":"object"==typeof n||"function"==typeof n?e[t.call(n)]||"object":typeof n}}.apply(t,r))||(e.exports=o)},1046:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i}.call(t,n,t,e))||(e.exports=r)},3965:(e,t,n)=>{var r,o;r=[n(9701),n(7096),n(6570),n(3578),n(317),n(8814),n(3886),n(9163),n(4968),n(1143),n(1825),n(7476),n(4377),n(152),n(135),n(2846),n(3134),n(9306)],void 0===(o=function(e,t,n,r,o,i,s,a,c,u,l,p,d,f,h){"use strict";var g=/^(none|table(?!-c[ea]).+)/,y={position:"absolute",visibility:"hidden",display:"block"},v={letterSpacing:"0",fontWeight:"400"};function m(e,t,n){var r=o.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function b(t,n,r,o,i,s){var c="width"===n?1:0,u=0,l=0;if(r===(o?"border":"content"))return 0;for(;c<4;c+=2)"margin"===r&&(l+=e.css(t,r+a[c],!0,i)),o?("content"===r&&(l-=e.css(t,"padding"+a[c],!0,i)),"margin"!==r&&(l-=e.css(t,"border"+a[c]+"Width",!0,i))):(l+=e.css(t,"padding"+a[c],!0,i),"padding"!==r?l+=e.css(t,"border"+a[c]+"Width",!0,i):u+=e.css(t,"border"+a[c]+"Width",!0,i));return!o&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+n[0].toUpperCase()+n.slice(1)]-s-l-u-.5))||0),l}function x(t,n,o){var s=c(t),a=(!f.boxSizingReliable()||o)&&"border-box"===e.css(t,"boxSizing",!1,s),u=a,p=l(t,n,s),d="offset"+n[0].toUpperCase()+n.slice(1);if(i.test(p)){if(!o)return p;p="auto"}return(!f.boxSizingReliable()&&a||!f.reliableTrDimensions()&&r(t,"tr")||"auto"===p||!parseFloat(p)&&"inline"===e.css(t,"display",!1,s))&&t.getClientRects().length&&(a="border-box"===e.css(t,"boxSizing",!1,s),(u=d in t)&&(p=t[d])),(p=parseFloat(p)||0)+b(t,n,o||(a?"border":"content"),u,s,p)+"px"}return e.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=l(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,r,i,a){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var c,u,l,d=n(r),g=s.test(r),y=t.style;if(g||(r=h(d)),l=e.cssHooks[r]||e.cssHooks[d],void 0===i)return l&&"get"in l&&void 0!==(c=l.get(t,!1,a))?c:y[r];"string"==(u=typeof i)&&(c=o.exec(i))&&c[1]&&(i=p(t,r,c),u="number"),null!=i&&i==i&&("number"!==u||g||(i+=c&&c[3]||(e.cssNumber[d]?"":"px")),f.clearCloneStyle||""!==i||0!==r.indexOf("background")||(y[r]="inherit"),l&&"set"in l&&void 0===(i=l.set(t,i,a))||(g?y.setProperty(r,i):y[r]=i))}},css:function(t,r,o,i){var a,c,u,p=n(r);return s.test(r)||(r=h(p)),(u=e.cssHooks[r]||e.cssHooks[p])&&"get"in u&&(a=u.get(t,!0,o)),void 0===a&&(a=l(t,r,i)),"normal"===a&&r in v&&(a=v[r]),""===o||o?(c=parseFloat(a),!0===o||isFinite(c)?c||0:a):a}}),e.each(["height","width"],(function(t,n){e.cssHooks[n]={get:function(t,r,o){if(r)return!g.test(e.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?x(t,n,o):u(t,y,(function(){return x(t,n,o)}))},set:function(t,r,i){var s,a=c(t),u=!f.scrollboxSize()&&"absolute"===a.position,l=(u||i)&&"border-box"===e.css(t,"boxSizing",!1,a),p=i?b(t,n,i,l,a):0;return l&&u&&(p-=Math.ceil(t["offset"+n[0].toUpperCase()+n.slice(1)]-parseFloat(a[n])-b(t,n,"border",!1,a)-.5)),p&&(s=o.exec(r))&&"px"!==(s[3]||"px")&&(t.style[n]=r,r=e.css(t,n)),m(0,r,p)}}})),e.cssHooks.marginLeft=d(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(l(e,"marginLeft"))||e.getBoundingClientRect().left-u(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),e.each({margin:"",padding:"",border:"Width"},(function(t,n){e.cssHooks[t+n]={expand:function(e){for(var r=0,o={},i="string"==typeof e?e.split(" "):[e];r<4;r++)o[t+a[r]+n]=i[r]||i[r-2]||i[0];return o}},"margin"!==t&&(e.cssHooks[t+n].set=m)})),e.fn.extend({css:function(n,r){return t(this,(function(t,n,r){var o,i,s={},a=0;if(Array.isArray(n)){for(o=c(t),i=n.length;a<i;a++)s[n[a]]=e.css(t,n[a],!1,o);return s}return void 0!==r?e.style(t,n,r):e.css(t,n)}),n,r,arguments.length>1)}}),e}.apply(t,r))||(e.exports=o)},4377:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}}.call(t,n,t,e))||(e.exports=r)},7476:(e,t,n)=>{var r,o;r=[n(9701),n(317)],void 0===(o=function(e,t){"use strict";return function(n,r,o,i){var s,a,c=20,u=i?function(){return i.cur()}:function(){return e.css(n,r,"")},l=u(),p=o&&o[3]||(e.cssNumber[r]?"":"px"),d=n.nodeType&&(e.cssNumber[r]||"px"!==p&&+l)&&t.exec(e.css(n,r));if(d&&d[3]!==p){for(l/=2,p=p||d[3],d=+l||1;c--;)e.style(n,r,d+p),(1-a)*(1-(a=u()/l||.5))<=0&&(c=0),d/=a;d*=2,e.style(n,r,d+p),o=o||[]}return o&&(d=+d||+l||0,s=o[1]?d+(o[1]+1)*o[2]:+o[2],i&&(i.unit=p,i.start=d,i.end=s)),s}}.apply(t,r))||(e.exports=o)},1825:(e,t,n)=>{var r,o;r=[n(9701),n(7282),n(3329),n(8814),n(4968),n(3886),n(4493),n(152)],void 0===(o=function(e,t,n,r,o,i,s,a){"use strict";return function(c,u,l){var p,d,f,h,g=i.test(u),y=c.style;return(l=l||o(c))&&(h=l.getPropertyValue(u)||l[u],g&&h&&(h=h.replace(s,"$1")||void 0),""!==h||t(c)||(h=e.style(c,u)),!a.pixelBoxStyles()&&r.test(h)&&n.test(u)&&(p=y.width,d=y.minWidth,f=y.maxWidth,y.minWidth=y.maxWidth=y.width=h,h=l.width,y.width=p,y.minWidth=d,y.maxWidth=f)),void 0!==h?h+"":h}}.apply(t,r))||(e.exports=o)},135:(e,t,n)=>{var r,o;r=[n(4799),n(9701)],void 0===(o=function(e,t){"use strict";var n=["Webkit","Moz","ms"],r=e.createElement("div").style,o={};return function(e){return t.cssProps[e]||o[e]||(e in r?e:o[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),o=n.length;o--;)if((e=n[o]+t)in r)return e}(e)||e)}}.apply(t,r))||(e.exports=o)},3117:(e,t,n)=>{var r,o;r=[n(9701),n(9306)],void 0===(o=function(e){"use strict";e.expr.pseudos.hidden=function(t){return!e.expr.pseudos.visible(t)},e.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}}.apply(t,r))||(e.exports=o)},9558:(e,t,n)=>{var r,o;r=[n(9701),n(8513),n(90)],void 0===(o=function(e,t,n){"use strict";var r={};function o(t){var n,o=t.ownerDocument,i=t.nodeName,s=r[i];return s||(n=o.body.appendChild(o.createElement(i)),s=e.css(n,"display"),n.parentNode.removeChild(n),"none"===s&&(s="block"),r[i]=s,s)}function i(e,r){for(var i,s,a=[],c=0,u=e.length;c<u;c++)(s=e[c]).style&&(i=s.style.display,r?("none"===i&&(a[c]=t.get(s,"display")||null,a[c]||(s.style.display="")),""===s.style.display&&n(s)&&(a[c]=o(s))):"none"!==i&&(a[c]="none",t.set(s,"display",i)));for(c=0;c<u;c++)null!=a[c]&&(e[c].style.display=a[c]);return e}return e.fn.extend({show:function(){return i(this,!0)},hide:function(){return i(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){n(this)?e(this).show():e(this).hide()}))}}),i}.apply(t,r))||(e.exports=o)},152:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(8128),n(610)],void 0===(o=function(e,t,n,r){"use strict";return function(){function o(){if(f){d.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",f.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",n.appendChild(d).appendChild(f);var e=window.getComputedStyle(f);s="1%"!==e.top,p=12===i(e.marginLeft),f.style.right="60%",u=36===i(e.right),a=36===i(e.width),f.style.position="absolute",c=12===i(f.offsetWidth/3),n.removeChild(d),f=null}}function i(e){return Math.round(parseFloat(e))}var s,a,c,u,l,p,d=t.createElement("div"),f=t.createElement("div");f.style&&(f.style.backgroundClip="content-box",f.cloneNode(!0).style.backgroundClip="",r.clearCloneStyle="content-box"===f.style.backgroundClip,e.extend(r,{boxSizingReliable:function(){return o(),a},pixelBoxStyles:function(){return o(),u},pixelPosition:function(){return o(),s},reliableMarginLeft:function(){return o(),p},scrollboxSize:function(){return o(),c},reliableTrDimensions:function(){var e,r,o,i;return null==l&&(e=t.createElement("table"),r=t.createElement("tr"),o=t.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",r.style.cssText="border:1px solid",r.style.height="1px",o.style.height="9px",o.style.display="block",n.appendChild(e).appendChild(r).appendChild(o),i=window.getComputedStyle(r),l=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===r.offsetHeight,n.removeChild(e)),l}}))}(),r}.apply(t,r))||(e.exports=o)},9163:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return["Top","Right","Bottom","Left"]}.call(t,n,t,e))||(e.exports=r)},4968:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=window),t.getComputedStyle(e)}}.call(t,n,t,e))||(e.exports=r)},90:(e,t,n)=>{var r,o;r=[n(9701),n(7282)],void 0===(o=function(e,t){"use strict";return function(n,r){return"none"===(n=r||n).style.display||""===n.style.display&&t(n)&&"none"===e.css(n,"display")}}.apply(t,r))||(e.exports=o)},3329:(e,t,n)=>{var r,o;r=[n(9163)],void 0===(o=function(e){"use strict";return new RegExp(e.join("|"),"i")}.apply(t,r))||(e.exports=o)},3886:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/^--/}.call(t,n,t,e))||(e.exports=r)},8814:(e,t,n)=>{var r,o;r=[n(5058)],void 0===(o=function(e){"use strict";return new RegExp("^("+e+")(?!px)[a-z%]+$","i")}.apply(t,r))||(e.exports=o)},1143:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r}}.call(t,n,t,e))||(e.exports=r)},2925:(e,t,n)=>{var r,o;r=[n(9701),n(7096),n(6570),n(8513),n(8545)],void 0===(o=function(e,t,n,r,o){"use strict";var i=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,s=/[A-Z]/g;function a(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(s,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:i.test(e)?JSON.parse(e):e)}(n)}catch(e){}o.set(e,t,n)}else n=void 0;return n}return e.extend({hasData:function(e){return o.hasData(e)||r.hasData(e)},data:function(e,t,n){return o.access(e,t,n)},removeData:function(e,t){o.remove(e,t)},_data:function(e,t,n){return r.access(e,t,n)},_removeData:function(e,t){r.remove(e,t)}}),e.fn.extend({data:function(e,i){var s,c,u,l=this[0],p=l&&l.attributes;if(void 0===e){if(this.length&&(u=o.get(l),1===l.nodeType&&!r.get(l,"hasDataAttrs"))){for(s=p.length;s--;)p[s]&&0===(c=p[s].name).indexOf("data-")&&(c=n(c.slice(5)),a(l,c,u[c]));r.set(l,"hasDataAttrs",!0)}return u}return"object"==typeof e?this.each((function(){o.set(this,e)})):t(this,(function(t){var n;if(l&&void 0===t)return void 0!==(n=o.get(l,e))||void 0!==(n=a(l,e))?n:void 0;this.each((function(){o.set(this,e,t)}))}),null,i,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){o.remove(this,e)}))}}),e}.apply(t,r))||(e.exports=o)},1407:(e,t,n)=>{var r,o;r=[n(9701),n(6570),n(9143),n(8871)],void 0===(o=function(e,t,n,r){"use strict";function o(){this.expando=e.expando+o.uid++}return o.uid=1,o.prototype={cache:function(e){var t=e[this.expando];return t||(t={},r(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,n,r){var o,i=this.cache(e);if("string"==typeof n)i[t(n)]=r;else for(o in n)i[t(o)]=n[o];return i},get:function(e,n){return void 0===n?this.cache(e):e[this.expando]&&e[this.expando][t(n)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(r,o){var i,s=r[this.expando];if(void 0!==s){if(void 0!==o){i=(o=Array.isArray(o)?o.map(t):(o=t(o))in s?[o]:o.match(n)||[]).length;for(;i--;)delete s[o[i]]}(void 0===o||e.isEmptyObject(s))&&(r.nodeType?r[this.expando]=void 0:delete r[this.expando])}},hasData:function(t){var n=t[this.expando];return void 0!==n&&!e.isEmptyObject(n)}},o}.apply(t,r))||(e.exports=o)},8871:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}}.call(t,n,t,e))||(e.exports=r)},8513:(e,t,n)=>{var r,o;r=[n(1407)],void 0===(o=function(e){"use strict";return new e}.apply(t,r))||(e.exports=o)},8545:(e,t,n)=>{var r,o;r=[n(1407)],void 0===(o=function(e){"use strict";return new e}.apply(t,r))||(e.exports=o)},2601:(e,t,n)=>{var r,o;r=[n(9701),n(7349),n(3764),n(8202)],void 0===(o=function(e,t,n){"use strict";function r(e){return e}function o(e){throw e}function i(e,n,r,o){var i;try{e&&t(i=e.promise)?i.call(e).done(n).fail(r):e&&t(i=e.then)?i.call(e,n,r):n.apply(void 0,[e].slice(o))}catch(e){r.apply(void 0,[e])}}return e.extend({Deferred:function(n){var i=[["notify","progress",e.Callbacks("memory"),e.Callbacks("memory"),2],["resolve","done",e.Callbacks("once memory"),e.Callbacks("once memory"),0,"resolved"],["reject","fail",e.Callbacks("once memory"),e.Callbacks("once memory"),1,"rejected"]],s="pending",a={state:function(){return s},always:function(){return c.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var n=arguments;return e.Deferred((function(r){e.each(i,(function(e,o){var i=t(n[o[4]])&&n[o[4]];c[o[1]]((function(){var e=i&&i.apply(this,arguments);e&&t(e.promise)?e.promise().progress(r.notify).done(r.resolve).fail(r.reject):r[o[0]+"With"](this,i?[e]:arguments)}))})),n=null})).promise()},then:function(n,s,a){var c=0;function u(n,i,s,a){return function(){var l=this,p=arguments,d=function(){var e,d;if(!(n<c)){if((e=s.apply(l,p))===i.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,t(d)?a?d.call(e,u(c,i,r,a),u(c,i,o,a)):(c++,d.call(e,u(c,i,r,a),u(c,i,o,a),u(c,i,r,i.notifyWith))):(s!==r&&(l=void 0,p=[e]),(a||i.resolveWith)(l,p))}},f=a?d:function(){try{d()}catch(t){e.Deferred.exceptionHook&&e.Deferred.exceptionHook(t,f.stackTrace),n+1>=c&&(s!==o&&(l=void 0,p=[t]),i.rejectWith(l,p))}};n?f():(e.Deferred.getStackHook&&(f.stackTrace=e.Deferred.getStackHook()),window.setTimeout(f))}}return e.Deferred((function(e){i[0][3].add(u(0,e,t(a)?a:r,e.notifyWith)),i[1][3].add(u(0,e,t(n)?n:r)),i[2][3].add(u(0,e,t(s)?s:o))})).promise()},promise:function(t){return null!=t?e.extend(t,a):a}},c={};return e.each(i,(function(e,t){var n=t[2],r=t[5];a[t[1]]=n.add,r&&n.add((function(){s=r}),i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),n.add(t[3].fire),c[t[0]]=function(){return c[t[0]+"With"](this===c?void 0:this,arguments),this},c[t[0]+"With"]=n.fireWith})),a.promise(c),n&&n.call(c,c),c},when:function(r){var o=arguments.length,s=o,a=Array(s),c=n.call(arguments),u=e.Deferred(),l=function(e){return function(t){a[e]=this,c[e]=arguments.length>1?n.call(arguments):t,--o||u.resolveWith(a,c)}};if(o<=1&&(i(r,u.done(l(s)).resolve,u.reject,!o),"pending"===u.state()||t(c[s]&&c[s].then)))return u.then();for(;s--;)i(c[s],l(s),u.reject);return u.promise()}}),e}.apply(t,r))||(e.exports=o)},5515:(e,t,n)=>{var r,o;r=[n(9701),n(2601)],void 0===(o=function(e){"use strict";var t=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;e.Deferred.exceptionHook=function(e,n){window.console&&window.console.warn&&e&&t.test(e.name)&&window.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)}}.apply(t,r))||(e.exports=o)},942:(e,t,n)=>{var r,o;r=[n(9701),n(3578),n(6570),n(7138),n(7349),n(3743),n(3764),n(96),n(7621)],void 0===(o=function(e,t,n,r,o,i,s){"use strict";var a=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;e.proxy=function(t,n){var r,i,a;if("string"==typeof n&&(r=t[n],n=t,t=r),o(t))return i=s.call(arguments,2),a=function(){return t.apply(n||this,i.concat(s.call(arguments)))},a.guid=t.guid=t.guid||e.guid++,a},e.holdReady=function(t){t?e.readyWait++:e.ready(!0)},e.isArray=Array.isArray,e.parseJSON=JSON.parse,e.nodeName=t,e.isFunction=o,e.isWindow=i,e.camelCase=n,e.type=r,e.now=Date.now,e.isNumeric=function(t){var n=e.type(t);return("number"===n||"string"===n)&&!isNaN(t-parseFloat(t))},e.trim=function(e){return null==e?"":(e+"").replace(a,"$1")}}.apply(t,r))||(e.exports=o)},96:(e,t,n)=>{var r,o;r=[n(9701),n(1068),n(5050)],void 0===(o=function(e){"use strict";e.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,n){e.fn[n]=function(e){return this.on(n,e)}}))}.apply(t,r))||(e.exports=o)},7621:(e,t,n)=>{var r,o;r=[n(9701),n(5050),n(7225)],void 0===(o=function(e){"use strict";e.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),e.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,n){e.fn[n]=function(e,t){return arguments.length>0?this.on(n,null,e,t):this.trigger(n)}}))}.apply(t,r))||(e.exports=o)},2167:(e,t,n)=>{var r,o;r=[n(9701),n(7096),n(3743),n(3965)],void 0===(o=function(e,t,n){"use strict";return e.each({Height:"height",Width:"width"},(function(r,o){e.each({padding:"inner"+r,content:o,"":"outer"+r},(function(i,s){e.fn[s]=function(a,c){var u=arguments.length&&(i||"boolean"!=typeof a),l=i||(!0===a||!0===c?"margin":"border");return t(this,(function(t,o,i){var a;return n(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+r],a["scroll"+r],t.body["offset"+r],a["offset"+r],a["client"+r])):void 0===i?e.css(t,o,l):e.style(t,o,i,l)}),o,u?a:void 0,u)}}))})),e}.apply(t,r))||(e.exports=o)},1134:(e,t,n)=>{var r,o;r=[n(9701),n(6570),n(4799),n(7349),n(317),n(9143),n(9163),n(90),n(7476),n(8513),n(9558),n(2846),n(5900),n(2601),n(6784),n(6867),n(3965),n(9059)],void 0===(o=function(e,t,n,r,o,i,s,a,c,u,l){"use strict";var p,d,f=/^(?:toggle|show|hide)$/,h=/queueHooks$/;function g(){d&&(!1===n.hidden&&window.requestAnimationFrame?window.requestAnimationFrame(g):window.setTimeout(g,e.fx.interval),e.fx.tick())}function y(){return window.setTimeout((function(){p=void 0})),p=Date.now()}function v(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=s[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function m(e,t,n){for(var r,o=(b.tweeners[t]||[]).concat(b.tweeners["*"]),i=0,s=o.length;i<s;i++)if(r=o[i].call(n,t,e))return r}function b(n,o,i){var s,a,c=0,u=b.prefilters.length,l=e.Deferred().always((function(){delete d.elem})),d=function(){if(a)return!1;for(var e=p||y(),t=Math.max(0,f.startTime+f.duration-e),r=1-(t/f.duration||0),o=0,i=f.tweens.length;o<i;o++)f.tweens[o].run(r);return l.notifyWith(n,[f,r,t]),r<1&&i?t:(i||l.notifyWith(n,[f,1,0]),l.resolveWith(n,[f]),!1)},f=l.promise({elem:n,props:e.extend({},o),opts:e.extend(!0,{specialEasing:{},easing:e.easing._default},i),originalProperties:o,originalOptions:i,startTime:p||y(),duration:i.duration,tweens:[],createTween:function(t,r){var o=e.Tween(n,f.opts,t,r,f.opts.specialEasing[t]||f.opts.easing);return f.tweens.push(o),o},stop:function(e){var t=0,r=e?f.tweens.length:0;if(a)return this;for(a=!0;t<r;t++)f.tweens[t].run(1);return e?(l.notifyWith(n,[f,1,0]),l.resolveWith(n,[f,e])):l.rejectWith(n,[f,e]),this}}),h=f.props;for(function(n,r){var o,i,s,a,c;for(o in n)if(s=r[i=t(o)],a=n[o],Array.isArray(a)&&(s=a[1],a=n[o]=a[0]),o!==i&&(n[i]=a,delete n[o]),(c=e.cssHooks[i])&&"expand"in c)for(o in a=c.expand(a),delete n[i],a)o in n||(n[o]=a[o],r[o]=s);else r[i]=s}(h,f.opts.specialEasing);c<u;c++)if(s=b.prefilters[c].call(f,n,h,f.opts))return r(s.stop)&&(e._queueHooks(f.elem,f.opts.queue).stop=s.stop.bind(s)),s;return e.map(h,m,f),r(f.opts.start)&&f.opts.start.call(n,f),f.progress(f.opts.progress).done(f.opts.done,f.opts.complete).fail(f.opts.fail).always(f.opts.always),e.fx.timer(e.extend(d,{elem:n,anim:f,queue:f.opts.queue})),f}return e.Animation=e.extend(b,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return c(n.elem,e,o.exec(t),n),n}]},tweener:function(e,t){r(e)?(t=e,e=["*"]):e=e.match(i);for(var n,o=0,s=e.length;o<s;o++)n=e[o],b.tweeners[n]=b.tweeners[n]||[],b.tweeners[n].unshift(t)},prefilters:[function(t,n,r){var o,i,s,c,p,d,h,g,y="width"in n||"height"in n,v=this,b={},x=t.style,w=t.nodeType&&a(t),C=u.get(t,"fxshow");for(o in r.queue||(null==(c=e._queueHooks(t,"fx")).unqueued&&(c.unqueued=0,p=c.empty.fire,c.empty.fire=function(){c.unqueued||p()}),c.unqueued++,v.always((function(){v.always((function(){c.unqueued--,e.queue(t,"fx").length||c.empty.fire()}))}))),n)if(i=n[o],f.test(i)){if(delete n[o],s=s||"toggle"===i,i===(w?"hide":"show")){if("show"!==i||!C||void 0===C[o])continue;w=!0}b[o]=C&&C[o]||e.style(t,o)}if((d=!e.isEmptyObject(n))||!e.isEmptyObject(b))for(o in y&&1===t.nodeType&&(r.overflow=[x.overflow,x.overflowX,x.overflowY],null==(h=C&&C.display)&&(h=u.get(t,"display")),"none"===(g=e.css(t,"display"))&&(h?g=h:(l([t],!0),h=t.style.display||h,g=e.css(t,"display"),l([t]))),("inline"===g||"inline-block"===g&&null!=h)&&"none"===e.css(t,"float")&&(d||(v.done((function(){x.display=h})),null==h&&(g=x.display,h="none"===g?"":g)),x.display="inline-block")),r.overflow&&(x.overflow="hidden",v.always((function(){x.overflow=r.overflow[0],x.overflowX=r.overflow[1],x.overflowY=r.overflow[2]}))),d=!1,b)d||(C?"hidden"in C&&(w=C.hidden):C=u.access(t,"fxshow",{display:h}),s&&(C.hidden=!w),w&&l([t],!0),v.done((function(){for(o in w||l([t]),u.remove(t,"fxshow"),b)e.style(t,o,b[o])}))),d=m(w?C[o]:0,o,v),o in C||(C[o]=d.start,w&&(d.end=d.start,d.start=0))}],prefilter:function(e,t){t?b.prefilters.unshift(e):b.prefilters.push(e)}}),e.speed=function(t,n,o){var i=t&&"object"==typeof t?e.extend({},t):{complete:o||!o&&n||r(t)&&t,duration:t,easing:o&&n||n&&!r(n)&&n};return e.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in e.fx.speeds?i.duration=e.fx.speeds[i.duration]:i.duration=e.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){r(i.old)&&i.old.call(this),i.queue&&e.dequeue(this,i.queue)},i},e.fn.extend({fadeTo:function(e,t,n,r){return this.filter(a).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(t,n,r,o){var i=e.isEmptyObject(t),s=e.speed(n,r,o),a=function(){var n=b(this,e.extend({},t),s);(i||u.get(this,"finish"))&&n.stop(!0)};return a.finish=a,i||!1===s.queue?this.each(a):this.queue(s.queue,a)},stop:function(t,n,r){var o=function(e){var t=e.stop;delete e.stop,t(r)};return"string"!=typeof t&&(r=n,n=t,t=void 0),n&&this.queue(t||"fx",[]),this.each((function(){var n=!0,i=null!=t&&t+"queueHooks",s=e.timers,a=u.get(this);if(i)a[i]&&a[i].stop&&o(a[i]);else for(i in a)a[i]&&a[i].stop&&h.test(i)&&o(a[i]);for(i=s.length;i--;)s[i].elem!==this||null!=t&&s[i].queue!==t||(s[i].anim.stop(r),n=!1,s.splice(i,1));!n&&r||e.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var n,r=u.get(this),o=r[t+"queue"],i=r[t+"queueHooks"],s=e.timers,a=o?o.length:0;for(r.finish=!0,e.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),n=s.length;n--;)s[n].elem===this&&s[n].queue===t&&(s[n].anim.stop(!0),s.splice(n,1));for(n=0;n<a;n++)o[n]&&o[n].finish&&o[n].finish.call(this);delete r.finish}))}}),e.each(["toggle","show","hide"],(function(t,n){var r=e.fn[n];e.fn[n]=function(e,t,o){return null==e||"boolean"==typeof e?r.apply(this,arguments):this.animate(v(n,!0),e,t,o)}})),e.each({slideDown:v("show"),slideUp:v("hide"),slideToggle:v("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,n){e.fn[t]=function(e,t,r){return this.animate(n,e,t,r)}})),e.timers=[],e.fx.tick=function(){var t,n=0,r=e.timers;for(p=Date.now();n<r.length;n++)(t=r[n])()||r[n]!==t||r.splice(n--,1);r.length||e.fx.stop(),p=void 0},e.fx.timer=function(t){e.timers.push(t),e.fx.start()},e.fx.interval=13,e.fx.start=function(){d||(d=!0,g())},e.fx.stop=function(){d=null},e.fx.speeds={slow:600,fast:200,_default:400},e}.apply(t,r))||(e.exports=o)},9059:(e,t,n)=>{var r,o;r=[n(9701),n(135),n(3965)],void 0===(o=function(e,t){"use strict";function n(e,t,r,o,i){return new n.prototype.init(e,t,r,o,i)}e.Tween=n,n.prototype={constructor:n,init:function(t,n,r,o,i,s){this.elem=t,this.prop=r,this.easing=i||e.easing._default,this.options=n,this.start=this.now=this.cur(),this.end=o,this.unit=s||(e.cssNumber[r]?"":"px")},cur:function(){var e=n.propHooks[this.prop];return e&&e.get?e.get(this):n.propHooks._default.get(this)},run:function(t){var r,o=n.propHooks[this.prop];return this.options.duration?this.pos=r=e.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=r=t,this.now=(this.end-this.start)*r+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),o&&o.set?o.set(this):n.propHooks._default.set(this),this}},n.prototype.init.prototype=n.prototype,n.propHooks={_default:{get:function(t){var n;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(n=e.css(t.elem,t.prop,""))&&"auto"!==n?n:0},set:function(n){e.fx.step[n.prop]?e.fx.step[n.prop](n):1!==n.elem.nodeType||!e.cssHooks[n.prop]&&null==n.elem.style[t(n.prop)]?n.elem[n.prop]=n.now:e.style(n.elem,n.prop,n.now+n.unit)}}},n.propHooks.scrollTop=n.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},e.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},e.fx=n.prototype.init,e.fx.step={}}.apply(t,r))||(e.exports=o)},382:(e,t,n)=>{var r,o;r=[n(9701),n(9306),n(1134)],void 0===(o=function(e){"use strict";e.expr.pseudos.animated=function(t){return e.grep(e.timers,(function(e){return t===e.elem})).length}}.apply(t,r))||(e.exports=o)},5050:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(8128),n(7349),n(9143),n(4960),n(3764),n(8871),n(8513),n(3578),n(2846),n(9306)],void 0===(o=function(e,t,n,r,o,i,s,a,c,u){"use strict";var l=/^([^.]*)(?:\.(.+)|)/;function p(){return!0}function d(){return!1}function f(e,n){return e===function(){try{return t.activeElement}catch(e){}}()==("focus"===n)}function h(t,n,r,o,i,s){var a,c;if("object"==typeof n){for(c in"string"!=typeof r&&(o=o||r,r=void 0),n)h(t,c,r,o,n[c],s);return t}if(null==o&&null==i?(i=r,o=r=void 0):null==i&&("string"==typeof r?(i=o,o=void 0):(i=o,o=r,r=void 0)),!1===i)i=d;else if(!i)return t;return 1===s&&(a=i,i=function(t){return e().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=e.guid++)),t.each((function(){e.event.add(this,n,i,o,r)}))}function g(t,n,r){r?(c.set(t,n,!1),e.event.add(t,n,{namespace:!1,handler:function(t){var o,i,a=c.get(this,n);if(1&t.isTrigger&&this[n]){if(a.length)(e.event.special[n]||{}).delegateType&&t.stopPropagation();else if(a=s.call(arguments),c.set(this,n,a),o=r(this,n),this[n](),a!==(i=c.get(this,n))||o?c.set(this,n,!1):i={},a!==i)return t.stopImmediatePropagation(),t.preventDefault(),i&&i.value}else a.length&&(c.set(this,n,{value:e.event.trigger(e.extend(a[0],e.Event.prototype),a.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===c.get(t,n)&&e.event.add(t,n,p)}return e.event={global:{},add:function(t,r,i,s,u){var p,d,f,h,g,y,v,m,b,x,w,C=c.get(t);if(a(t))for(i.handler&&(i=(p=i).handler,u=p.selector),u&&e.find.matchesSelector(n,u),i.guid||(i.guid=e.guid++),(h=C.events)||(h=C.events=Object.create(null)),(d=C.handle)||(d=C.handle=function(n){return void 0!==e&&e.event.triggered!==n.type?e.event.dispatch.apply(t,arguments):void 0}),g=(r=(r||"").match(o)||[""]).length;g--;)b=w=(f=l.exec(r[g])||[])[1],x=(f[2]||"").split(".").sort(),b&&(v=e.event.special[b]||{},b=(u?v.delegateType:v.bindType)||b,v=e.event.special[b]||{},y=e.extend({type:b,origType:w,data:s,handler:i,guid:i.guid,selector:u,needsContext:u&&e.expr.match.needsContext.test(u),namespace:x.join(".")},p),(m=h[b])||((m=h[b]=[]).delegateCount=0,v.setup&&!1!==v.setup.call(t,s,x,d)||t.addEventListener&&t.addEventListener(b,d)),v.add&&(v.add.call(t,y),y.handler.guid||(y.handler.guid=i.guid)),u?m.splice(m.delegateCount++,0,y):m.push(y),e.event.global[b]=!0)},remove:function(t,n,r,i,s){var a,u,p,d,f,h,g,y,v,m,b,x=c.hasData(t)&&c.get(t);if(x&&(d=x.events)){for(f=(n=(n||"").match(o)||[""]).length;f--;)if(v=b=(p=l.exec(n[f])||[])[1],m=(p[2]||"").split(".").sort(),v){for(g=e.event.special[v]||{},y=d[v=(i?g.delegateType:g.bindType)||v]||[],p=p[2]&&new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"),u=a=y.length;a--;)h=y[a],!s&&b!==h.origType||r&&r.guid!==h.guid||p&&!p.test(h.namespace)||i&&i!==h.selector&&("**"!==i||!h.selector)||(y.splice(a,1),h.selector&&y.delegateCount--,g.remove&&g.remove.call(t,h));u&&!y.length&&(g.teardown&&!1!==g.teardown.call(t,m,x.handle)||e.removeEvent(t,v,x.handle),delete d[v])}else for(v in d)e.event.remove(t,v+n[f],r,i,!0);e.isEmptyObject(d)&&c.remove(t,"handle events")}},dispatch:function(t){var n,r,o,i,s,a,u=new Array(arguments.length),l=e.event.fix(t),p=(c.get(this,"events")||Object.create(null))[l.type]||[],d=e.event.special[l.type]||{};for(u[0]=l,n=1;n<arguments.length;n++)u[n]=arguments[n];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(a=e.event.handlers.call(this,l,p),n=0;(i=a[n++])&&!l.isPropagationStopped();)for(l.currentTarget=i.elem,r=0;(s=i.handlers[r++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==s.namespace&&!l.rnamespace.test(s.namespace)||(l.handleObj=s,l.data=s.data,void 0!==(o=((e.event.special[s.origType]||{}).handle||s.handler).apply(i.elem,u))&&!1===(l.result=o)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(t,n){var r,o,i,s,a,c=[],u=n.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(s=[],a={},r=0;r<u;r++)void 0===a[i=(o=n[r]).selector+" "]&&(a[i]=o.needsContext?e(i,this).index(l)>-1:e.find(i,this,null,[l]).length),a[i]&&s.push(o);s.length&&c.push({elem:l,handlers:s})}return l=this,u<n.length&&c.push({elem:l,handlers:n.slice(u)}),c},addProp:function(t,n){Object.defineProperty(e.Event.prototype,t,{enumerable:!0,configurable:!0,get:r(n)?function(){if(this.originalEvent)return n(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[e.expando]?t:new e.Event(t)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return i.test(t.type)&&t.click&&u(t,"input")&&g(t,"click",p),!1},trigger:function(e){var t=this||e;return i.test(t.type)&&t.click&&u(t,"input")&&g(t,"click"),!0},_default:function(e){var t=e.target;return i.test(t.type)&&t.click&&u(t,"input")&&c.get(t,"click")||u(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},e.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},e.Event=function(t,n){if(!(this instanceof e.Event))return new e.Event(t,n);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?p:d,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,n&&e.extend(this,n),this.timeStamp=t&&t.timeStamp||Date.now(),this[e.expando]=!0},e.Event.prototype={constructor:e.Event,isDefaultPrevented:d,isPropagationStopped:d,isImmediatePropagationStopped:d,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=p,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=p,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=p,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},e.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},e.event.addProp),e.each({focus:"focusin",blur:"focusout"},(function(t,n){e.event.special[t]={setup:function(){return g(this,t,f),!1},trigger:function(){return g(this,t),!0},_default:function(e){return c.get(e.target,t)},delegateType:n}})),e.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,n){e.event.special[t]={delegateType:n,bindType:n,handle:function(t){var r,o=this,i=t.relatedTarget,s=t.handleObj;return i&&(i===o||e.contains(o,i))||(t.type=s.origType,r=s.handler.apply(this,arguments),t.type=n),r}}})),e.fn.extend({on:function(e,t,n,r){return h(this,e,t,n,r)},one:function(e,t,n,r){return h(this,e,t,n,r,1)},off:function(t,n,r){var o,i;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,e(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"==typeof t){for(i in t)this.off(i,n,t[i]);return this}return!1!==n&&"function"!=typeof n||(r=n,n=void 0),!1===r&&(r=d),this.each((function(){e.event.remove(this,t,r,n)}))}}),e}.apply(t,r))||(e.exports=o)},1942:(e,t,n)=>{var r,o;r=[n(9701),n(8513),n(3684),n(5050),n(7225)],void 0===(o=function(e,t,n){"use strict";return n.focusin||e.each({focus:"focusin",blur:"focusout"},(function(n,r){var o=function(t){e.event.simulate(r,t.target,e.event.fix(t))};e.event.special[r]={setup:function(){var e=this.ownerDocument||this.document||this,i=t.access(e,r);i||e.addEventListener(n,o,!0),t.access(e,r,(i||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,i=t.access(e,r)-1;i?t.access(e,r,i):(e.removeEventListener(n,o,!0),t.remove(e,r))}}})),e}.apply(t,r))||(e.exports=o)},3684:(e,t,n)=>{var r,o;r=[n(610)],void 0===(o=function(e){"use strict";return e.focusin="onfocusin"in window,e}.apply(t,r))||(e.exports=o)},7225:(e,t,n)=>{var r,o;r=[n(9701),n(4799),n(8513),n(8871),n(9187),n(7349),n(3743),n(5050)],void 0===(o=function(e,t,n,r,o,i,s){"use strict";var a=/^(?:focusinfocus|focusoutblur)$/,c=function(e){e.stopPropagation()};return e.extend(e.event,{trigger:function(u,l,p,d){var f,h,g,y,v,m,b,x,w=[p||t],C=o.call(u,"type")?u.type:u,k=o.call(u,"namespace")?u.namespace.split("."):[];if(h=x=g=p=p||t,3!==p.nodeType&&8!==p.nodeType&&!a.test(C+e.event.triggered)&&(C.indexOf(".")>-1&&(k=C.split("."),C=k.shift(),k.sort()),v=C.indexOf(":")<0&&"on"+C,(u=u[e.expando]?u:new e.Event(C,"object"==typeof u&&u)).isTrigger=d?2:3,u.namespace=k.join("."),u.rnamespace=u.namespace?new RegExp("(^|\\.)"+k.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,u.result=void 0,u.target||(u.target=p),l=null==l?[u]:e.makeArray(l,[u]),b=e.event.special[C]||{},d||!b.trigger||!1!==b.trigger.apply(p,l))){if(!d&&!b.noBubble&&!s(p)){for(y=b.delegateType||C,a.test(y+C)||(h=h.parentNode);h;h=h.parentNode)w.push(h),g=h;g===(p.ownerDocument||t)&&w.push(g.defaultView||g.parentWindow||window)}for(f=0;(h=w[f++])&&!u.isPropagationStopped();)x=h,u.type=f>1?y:b.bindType||C,(m=(n.get(h,"events")||Object.create(null))[u.type]&&n.get(h,"handle"))&&m.apply(h,l),(m=v&&h[v])&&m.apply&&r(h)&&(u.result=m.apply(h,l),!1===u.result&&u.preventDefault());return u.type=C,d||u.isDefaultPrevented()||b._default&&!1!==b._default.apply(w.pop(),l)||!r(p)||v&&i(p[C])&&!s(p)&&((g=p[v])&&(p[v]=null),e.event.triggered=C,u.isPropagationStopped()&&x.addEventListener(C,c),p[C](),u.isPropagationStopped()&&x.removeEventListener(C,c),e.event.triggered=void 0,g&&(p[v]=g)),u.result}},simulate:function(t,n,r){var o=e.extend(new e.Event,r,{type:t,isSimulated:!0});e.event.trigger(o,null,n)}}),e.fn.extend({trigger:function(t,n){return this.each((function(){e.event.trigger(t,n,this)}))},triggerHandler:function(t,n){var r=this[0];if(r)return e.event.trigger(t,n,r,!0)}}),e}.apply(t,r))||(e.exports=o)},100:(e,t,n)=>{var r,o;r=[n(9701)],void 0===(o=function(n){"use strict";void 0===(o=function(){return n}.apply(t,r=[]))||(e.exports=o)}.apply(t,r))||(e.exports=o)},1059:(e,t,n)=>{var r,o;r=[n(9701)],void 0===(o=function(e){"use strict";var t=window.jQuery,n=window.$;e.noConflict=function(r){return window.$===e&&(window.$=n),r&&window.jQuery===e&&(window.jQuery=t),e},"undefined"==typeof noGlobal&&(window.jQuery=window.$=e)}.apply(t,r))||(e.exports=o)},6736:(e,t,n)=>{var r,o;r=[n(9701),n(9306),n(6784),n(8202),n(2601),n(5515),n(3134),n(2925),n(5900),n(7776),n(5161),n(5050),n(1942),n(6867),n(5547),n(1201),n(3965),n(3117),n(3159),n(1068),n(6342),n(8634),n(7661),n(6266),n(6749),n(928),n(1134),n(382),n(49),n(2167),n(942),n(100),n(1059)],void 0===(o=function(e){"use strict";return e}.apply(t,r))||(e.exports=o)},6867:(e,t,n)=>{var r,o;r=[n(9701),n(7282),n(1759),n(7349),n(6336),n(4960),n(7096),n(2335),n(3837),n(725),n(7871),n(414),n(8928),n(9881),n(8513),n(8545),n(8871),n(318),n(3578),n(2846),n(6784),n(9306),n(5050)],void 0===(o=function(e,t,n,r,o,i,s,a,c,u,l,p,d,f,h,g,y,v,m){"use strict";var b=/<script|<style|<link/i,x=/checked\s*(?:[^=]|=\s*.checked.)/i,w=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function C(t,n){return m(t,"table")&&m(11!==n.nodeType?n:n.firstChild,"tr")&&e(t).children("tbody")[0]||t}function k(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function T(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function S(t,n){var r,o,i,s,a,c;if(1===n.nodeType){if(h.hasData(t)&&(c=h.get(t).events))for(i in h.remove(n,"handle events"),c)for(r=0,o=c[i].length;r<o;r++)e.event.add(n,i,c[i][r]);g.hasData(t)&&(s=g.access(t),a=e.extend({},s),g.set(n,a))}}function E(e,t){var n=t.nodeName.toLowerCase();"input"===n&&i.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function A(t,o,i,s){o=n(o);var a,u,p,g,y,m,b=0,C=t.length,S=C-1,E=o[0],_=r(E);if(_||C>1&&"string"==typeof E&&!f.checkClone&&x.test(E))return t.each((function(e){var n=t.eq(e);_&&(o[0]=E.call(this,e,n.html())),A(n,o,i,s)}));if(C&&(u=(a=d(o,t[0].ownerDocument,!1,t,s)).firstChild,1===a.childNodes.length&&(a=u),u||s)){for(g=(p=e.map(l(a,"script"),k)).length;b<C;b++)y=a,b!==S&&(y=e.clone(y,!0,!0),g&&e.merge(p,l(y,"script"))),i.call(t[b],y,b);if(g)for(m=p[p.length-1].ownerDocument,e.map(p,T),b=0;b<g;b++)y=p[b],c.test(y.type||"")&&!h.access(y,"globalEval")&&e.contains(m,y)&&(y.src&&"module"!==(y.type||"").toLowerCase()?e._evalUrl&&!y.noModule&&e._evalUrl(y.src,{nonce:y.nonce||y.getAttribute("nonce")},m):v(y.textContent.replace(w,""),y,m))}return t}function _(n,r,o){for(var i,s=r?e.filter(r,n):n,a=0;null!=(i=s[a]);a++)o||1!==i.nodeType||e.cleanData(l(i)),i.parentNode&&(o&&t(i)&&p(l(i,"script")),i.parentNode.removeChild(i));return n}return e.extend({htmlPrefilter:function(e){return e},clone:function(n,r,o){var i,s,a,c,u=n.cloneNode(!0),d=t(n);if(!(f.noCloneChecked||1!==n.nodeType&&11!==n.nodeType||e.isXMLDoc(n)))for(c=l(u),i=0,s=(a=l(n)).length;i<s;i++)E(a[i],c[i]);if(r)if(o)for(a=a||l(n),c=c||l(u),i=0,s=a.length;i<s;i++)S(a[i],c[i]);else S(n,u);return(c=l(u,"script")).length>0&&p(c,!d&&l(n,"script")),u},cleanData:function(t){for(var n,r,o,i=e.event.special,s=0;void 0!==(r=t[s]);s++)if(y(r)){if(n=r[h.expando]){if(n.events)for(o in n.events)i[o]?e.event.remove(r,o):e.removeEvent(r,o,n.handle);r[h.expando]=void 0}r[g.expando]&&(r[g.expando]=void 0)}}}),e.fn.extend({detach:function(e){return _(this,e,!0)},remove:function(e){return _(this,e)},text:function(t){return s(this,(function(t){return void 0===t?e.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return A(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||C(this,e).appendChild(e)}))},prepend:function(){return A(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=C(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return A(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return A(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var t,n=0;null!=(t=this[n]);n++)1===t.nodeType&&(e.cleanData(l(t,!1)),t.textContent="");return this},clone:function(t,n){return t=null!=t&&t,n=null==n?t:n,this.map((function(){return e.clone(this,t,n)}))},html:function(t){return s(this,(function(t){var n=this[0]||{},r=0,o=this.length;if(void 0===t&&1===n.nodeType)return n.innerHTML;if("string"==typeof t&&!b.test(t)&&!u[(a.exec(t)||["",""])[1].toLowerCase()]){t=e.htmlPrefilter(t);try{for(;r<o;r++)1===(n=this[r]||{}).nodeType&&(e.cleanData(l(n,!1)),n.innerHTML=t);n=0}catch(e){}}n&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return A(this,arguments,(function(n){var r=this.parentNode;e.inArray(this,t)<0&&(e.cleanData(l(this)),r&&r.replaceChild(n,this))}),t)}}),e.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,n){e.fn[t]=function(t){for(var r,i=[],s=e(t),a=s.length-1,c=0;c<=a;c++)r=c===a?this:this.clone(!0),e(s[c])[n](r),o.apply(i,r.get());return this.pushStack(i)}})),e}.apply(t,r))||(e.exports=o)},5547:(e,t,n)=>{var r,o;r=[n(1068)],void 0===(o=function(e){"use strict";return e._evalUrl=function(t,n,r){return e.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){e.globalEval(t,n,r)}})},e._evalUrl}.apply(t,r))||(e.exports=o)},8928:(e,t,n)=>{var r,o;r=[n(9701),n(7138),n(7282),n(2335),n(3837),n(725),n(7871),n(414)],void 0===(o=function(e,t,n,r,o,i,s,a){"use strict";var c=/<|&#?\w+;/;return function(u,l,p,d,f){for(var h,g,y,v,m,b,x=l.createDocumentFragment(),w=[],C=0,k=u.length;C<k;C++)if((h=u[C])||0===h)if("object"===t(h))e.merge(w,h.nodeType?[h]:h);else if(c.test(h)){for(g=g||x.appendChild(l.createElement("div")),y=(r.exec(h)||["",""])[1].toLowerCase(),v=i[y]||i._default,g.innerHTML=v[1]+e.htmlPrefilter(h)+v[2],b=v[0];b--;)g=g.lastChild;e.merge(w,g.childNodes),(g=x.firstChild).textContent=""}else w.push(l.createTextNode(h));for(x.textContent="",C=0;h=w[C++];)if(d&&e.inArray(h,d)>-1)f&&f.push(h);else if(m=n(h),g=s(x.appendChild(h),"script"),m&&a(g),p)for(b=0;h=g[b++];)o.test(h.type||"")&&p.push(h);return x}}.apply(t,r))||(e.exports=o)},7871:(e,t,n)=>{var r,o;r=[n(9701),n(3578)],void 0===(o=function(e,t){"use strict";return function(n,r){var o;return o=void 0!==n.getElementsByTagName?n.getElementsByTagName(r||"*"):void 0!==n.querySelectorAll?n.querySelectorAll(r||"*"):[],void 0===r||r&&t(n,r)?e.merge([n],o):o}}.apply(t,r))||(e.exports=o)},414:(e,t,n)=>{var r,o;r=[n(8513)],void 0===(o=function(e){"use strict";return function(t,n){for(var r=0,o=t.length;r<o;r++)e.set(t[r],"globalEval",!n||e.get(n[r],"globalEval"))}}.apply(t,r))||(e.exports=o)},9881:(e,t,n)=>{var r,o;r=[n(4799),n(610)],void 0===(o=function(e,t){"use strict";var n,r;return n=e.createDocumentFragment().appendChild(e.createElement("div")),(r=e.createElement("input")).setAttribute("type","radio"),r.setAttribute("checked","checked"),r.setAttribute("name","t"),n.appendChild(r),t.checkClone=n.cloneNode(!0).cloneNode(!0).lastChild.checked,n.innerHTML="<textarea>x</textarea>",t.noCloneChecked=!!n.cloneNode(!0).lastChild.defaultValue,n.innerHTML="<option></option>",t.option=!!n.lastChild,t}.apply(t,r))||(e.exports=o)},3837:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/^$|^module$|\/(?:java|ecma)script/i}.call(t,n,t,e))||(e.exports=r)},2335:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/<([a-z][^\/\0>\x20\t\r\n\f]*)/i}.call(t,n,t,e))||(e.exports=r)},725:(e,t,n)=>{var r,o;r=[n(9881)],void 0===(o=function(e){"use strict";var t={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};return t.tbody=t.tfoot=t.colgroup=t.caption=t.thead,t.th=t.td,e.option||(t.optgroup=t.option=[1,"<select multiple='multiple'>","</select>"]),t}.apply(t,r))||(e.exports=o)},49:(e,t,n)=>{var r,o;r=[n(9701),n(7096),n(8128),n(7349),n(8814),n(1825),n(4377),n(152),n(3743),n(2846),n(3965),n(9306)],void 0===(o=function(e,t,n,r,o,i,s,a,c){"use strict";return e.offset={setOffset:function(t,n,o){var i,s,a,c,u,l,p=e.css(t,"position"),d=e(t),f={};"static"===p&&(t.style.position="relative"),u=d.offset(),a=e.css(t,"top"),l=e.css(t,"left"),("absolute"===p||"fixed"===p)&&(a+l).indexOf("auto")>-1?(c=(i=d.position()).top,s=i.left):(c=parseFloat(a)||0,s=parseFloat(l)||0),r(n)&&(n=n.call(t,o,e.extend({},u))),null!=n.top&&(f.top=n.top-u.top+c),null!=n.left&&(f.left=n.left-u.left+s),"using"in n?n.using.call(t,f):d.css(f)}},e.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(n){e.offset.setOffset(this,t,n)}));var n,r,o=this[0];return o?o.getClientRects().length?(n=o.getBoundingClientRect(),r=o.ownerDocument.defaultView,{top:n.top+r.pageYOffset,left:n.left+r.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,n,r,o=this[0],i={top:0,left:0};if("fixed"===e.css(o,"position"))n=o.getBoundingClientRect();else{for(n=this.offset(),r=o.ownerDocument,t=o.offsetParent||r.documentElement;t&&(t===r.body||t===r.documentElement)&&"static"===e.css(t,"position");)t=t.parentNode;t&&t!==o&&1===t.nodeType&&((i=e(t).offset()).top+=e.css(t,"borderTopWidth",!0),i.left+=e.css(t,"borderLeftWidth",!0))}return{top:n.top-i.top-e.css(o,"marginTop",!0),left:n.left-i.left-e.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===e.css(t,"position");)t=t.offsetParent;return t||n}))}}),e.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(n,r){var o="pageYOffset"===r;e.fn[n]=function(e){return t(this,(function(e,t,n){var i;if(c(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n)return i?i[r]:e[t];i?i.scrollTo(o?i.pageXOffset:n,o?n:i.pageYOffset):e[t]=n}),n,e,arguments.length)}})),e.each(["top","left"],(function(t,n){e.cssHooks[n]=s(a.pixelPosition,(function(t,r){if(r)return r=i(t,n),o.test(r)?e(t).position()[n]+"px":r}))})),e}.apply(t,r))||(e.exports=o)},5900:(e,t,n)=>{var r,o;r=[n(9701),n(8513),n(2601),n(8202)],void 0===(o=function(e,t){"use strict";return e.extend({queue:function(n,r,o){var i;if(n)return r=(r||"fx")+"queue",i=t.get(n,r),o&&(!i||Array.isArray(o)?i=t.access(n,r,e.makeArray(o)):i.push(o)),i||[]},dequeue:function(t,n){n=n||"fx";var r=e.queue(t,n),o=r.length,i=r.shift(),s=e._queueHooks(t,n);"inprogress"===i&&(i=r.shift(),o--),i&&("fx"===n&&r.unshift("inprogress"),delete s.stop,i.call(t,(function(){e.dequeue(t,n)}),s)),!o&&s&&s.empty.fire()},_queueHooks:function(n,r){var o=r+"queueHooks";return t.get(n,o)||t.access(n,o,{empty:e.Callbacks("once memory").add((function(){t.remove(n,[r+"queue",o])}))})}}),e.fn.extend({queue:function(t,n){var r=2;return"string"!=typeof t&&(n=t,t="fx",r--),arguments.length<r?e.queue(this[0],t):void 0===n?this:this.each((function(){var r=e.queue(this,t,n);e._queueHooks(this,t),"fx"===t&&"inprogress"!==r[0]&&e.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){e.dequeue(this,t)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(n,r){var o,i=1,s=e.Deferred(),a=this,c=this.length,u=function(){--i||s.resolveWith(a,[a])};for("string"!=typeof n&&(r=n,n=void 0),n=n||"fx";c--;)(o=t.get(a[c],n+"queueHooks"))&&o.empty&&(i++,o.empty.add(u));return u(),s.promise(r)}}),e}.apply(t,r))||(e.exports=o)},7776:(e,t,n)=>{var r,o;r=[n(9701),n(5900),n(1134)],void 0===(o=function(e){"use strict";return e.fn.delay=function(t,n){return t=e.fx&&e.fx.speeds[t]||t,n=n||"fx",this.queue(n,(function(e,n){var r=window.setTimeout(e,t);n.stop=function(){window.clearTimeout(r)}}))},e.fn.delay}.apply(t,r))||(e.exports=o)},7504:(e,t,n)=>{var r,o;r=[n(9701),n(1442)],void 0===(o=function(e,t){"use strict";e.find=t,e.expr=t.selectors,e.expr[":"]=e.expr.pseudos,e.uniqueSort=e.unique=t.uniqueSort,e.text=t.getText,e.isXMLDoc=t.isXML,e.contains=t.contains,e.escapeSelector=t.escape}.apply(t,r))||(e.exports=o)},9306:(e,t,n)=>{var r,o;r=[n(7504)],void 0===(o=function(){}.apply(t,r))||(e.exports=o)},3159:(e,t,n)=>{var r,o;r=[n(9701),n(7138),n(4960),n(7349),n(2846),n(6784),n(8055)],void 0===(o=function(e,t,n,r){"use strict";var o=/\[\]$/,i=/\r?\n/g,s=/^(?:submit|button|image|reset|file)$/i,a=/^(?:input|select|textarea|keygen)/i;function c(n,r,i,s){var a;if(Array.isArray(r))e.each(r,(function(e,t){i||o.test(n)?s(n,t):c(n+"["+("object"==typeof t&&null!=t?e:"")+"]",t,i,s)}));else if(i||"object"!==t(r))s(n,r);else for(a in r)c(n+"["+a+"]",r[a],i,s)}return e.param=function(t,n){var o,i=[],s=function(e,t){var n=r(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!e.isPlainObject(t))e.each(t,(function(){s(this.name,this.value)}));else for(o in t)c(o,t[o],n,s);return i.join("&")},e.fn.extend({serialize:function(){return e.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=e.prop(this,"elements");return t?e.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!e(this).is(":disabled")&&a.test(this.nodeName)&&!s.test(t)&&(this.checked||!n.test(t))})).map((function(t,n){var r=e(this).val();return null==r?null:Array.isArray(r)?e.map(r,(function(e){return{name:n.name,value:e.replace(i,"\r\n")}})):{name:n.name,value:r.replace(i,"\r\n")}})).get()}}),e}.apply(t,r))||(e.exports=o)},6784:(e,t,n)=>{var r,o;r=[n(9701),n(4947),n(429),n(5986),n(9790),n(2044),n(3578),n(2846),n(7717),n(9306)],void 0===(o=function(e,t,n,r,o,i,s){"use strict";var a=/^(?:parents|prev(?:Until|All))/,c={children:!0,contents:!0,next:!0,prev:!0};function u(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}return e.fn.extend({has:function(t){var n=e(t,this),r=n.length;return this.filter((function(){for(var t=0;t<r;t++)if(e.contains(this,n[t]))return!0}))},closest:function(t,n){var r,o=0,s=this.length,a=[],c="string"!=typeof t&&e(t);if(!i.test(t))for(;o<s;o++)for(r=this[o];r&&r!==n;r=r.parentNode)if(r.nodeType<11&&(c?c.index(r)>-1:1===r.nodeType&&e.find.matchesSelector(r,t))){a.push(r);break}return this.pushStack(a.length>1?e.uniqueSort(a):a)},index:function(t){return t?"string"==typeof t?n.call(e(t),this[0]):n.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,n){return this.pushStack(e.uniqueSort(e.merge(this.get(),e(t,n))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),e.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return r(e,"parentNode")},parentsUntil:function(e,t,n){return r(e,"parentNode",n)},next:function(e){return u(e,"nextSibling")},prev:function(e){return u(e,"previousSibling")},nextAll:function(e){return r(e,"nextSibling")},prevAll:function(e){return r(e,"previousSibling")},nextUntil:function(e,t,n){return r(e,"nextSibling",n)},prevUntil:function(e,t,n){return r(e,"previousSibling",n)},siblings:function(e){return o((e.parentNode||{}).firstChild,e)},children:function(e){return o(e.firstChild)},contents:function(n){return null!=n.contentDocument&&t(n.contentDocument)?n.contentDocument:(s(n,"template")&&(n=n.content||n),e.merge([],n.childNodes))}},(function(t,n){e.fn[t]=function(r,o){var i=e.map(this,n,r);return"Until"!==t.slice(-5)&&(o=r),o&&"string"==typeof o&&(i=e.filter(o,i)),this.length>1&&(c[t]||e.uniqueSort(i),a.test(t)&&i.reverse()),this.pushStack(i)}})),e}.apply(t,r))||(e.exports=o)},7717:(e,t,n)=>{var r,o;r=[n(9701),n(429),n(7349),n(2044),n(9306)],void 0===(o=function(e,t,n,r){"use strict";function o(r,o,i){return n(o)?e.grep(r,(function(e,t){return!!o.call(e,t,e)!==i})):o.nodeType?e.grep(r,(function(e){return e===o!==i})):"string"!=typeof o?e.grep(r,(function(e){return t.call(o,e)>-1!==i})):e.filter(o,r,i)}e.filter=function(t,n,r){var o=n[0];return r&&(t=":not("+t+")"),1===n.length&&1===o.nodeType?e.find.matchesSelector(o,t)?[o]:[]:e.find.matches(t,e.grep(n,(function(e){return 1===e.nodeType})))},e.fn.extend({find:function(t){var n,r,o=this.length,i=this;if("string"!=typeof t)return this.pushStack(e(t).filter((function(){for(n=0;n<o;n++)if(e.contains(i[n],this))return!0})));for(r=this.pushStack([]),n=0;n<o;n++)e.find(t,i[n],r);return o>1?e.uniqueSort(r):r},filter:function(e){return this.pushStack(o(this,e||[],!1))},not:function(e){return this.pushStack(o(this,e||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&r.test(t)?e(t):t||[],!1).length}})}.apply(t,r))||(e.exports=o)},5986:(e,t,n)=>{var r,o;r=[n(9701)],void 0===(o=function(e){"use strict";return function(t,n,r){for(var o=[],i=void 0!==r;(t=t[n])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&e(t).is(r))break;o.push(t)}return o}}.apply(t,r))||(e.exports=o)},2044:(e,t,n)=>{var r,o;r=[n(9701),n(9306)],void 0===(o=function(e){"use strict";return e.expr.match.needsContext}.apply(t,r))||(e.exports=o)},9790:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}}.call(t,n,t,e))||(e.exports=r)},3221:(e,t,n)=>{var r,o;r=[n(4234)],void 0===(o=function(e){"use strict";return e.call(Object)}.apply(t,r))||(e.exports=o)},7692:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return[]}.call(t,n,t,e))||(e.exports=r)},3967:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return{}}.call(t,n,t,e))||(e.exports=r)},4799:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return window.document}.call(t,n,t,e))||(e.exports=r)},8128:(e,t,n)=>{var r,o;r=[n(4799)],void 0===(o=function(e){"use strict";return e.documentElement}.apply(t,r))||(e.exports=o)},1759:(e,t,n)=>{var r,o;r=[n(7692)],void 0===(o=function(e){"use strict";return e.flat?function(t){return e.flat.call(t)}:function(t){return e.concat.apply([],t)}}.apply(t,r))||(e.exports=o)},4234:(e,t,n)=>{var r,o;r=[n(9187)],void 0===(o=function(e){"use strict";return e.toString}.apply(t,r))||(e.exports=o)},4947:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return Object.getPrototypeOf}.call(t,n,t,e))||(e.exports=r)},9187:(e,t,n)=>{var r,o;r=[n(3967)],void 0===(o=function(e){"use strict";return e.hasOwnProperty}.apply(t,r))||(e.exports=o)},429:(e,t,n)=>{var r,o;r=[n(7692)],void 0===(o=function(e){"use strict";return e.indexOf}.apply(t,r))||(e.exports=o)},7349:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item}}.call(t,n,t,e))||(e.exports=r)},3743:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return function(e){return null!=e&&e===e.window}}.call(t,n,t,e))||(e.exports=r)},5058:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source}.call(t,n,t,e))||(e.exports=r)},6336:(e,t,n)=>{var r,o;r=[n(7692)],void 0===(o=function(e){"use strict";return e.push}.apply(t,r))||(e.exports=o)},4960:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/^(?:checkbox|radio)$/i}.call(t,n,t,e))||(e.exports=r)},317:(e,t,n)=>{var r,o;r=[n(5058)],void 0===(o=function(e){"use strict";return new RegExp("^(?:([+-])=|)("+e+")([a-z%]*)$","i")}.apply(t,r))||(e.exports=o)},9143:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return/[^\x20\t\r\n\f]+/g}.call(t,n,t,e))||(e.exports=r)},4493:(e,t,n)=>{var r,o;r=[n(9098)],void 0===(o=function(e){"use strict";return new RegExp("^"+e+"+|((?:^|[^\\\\])(?:\\\\.)*)"+e+"+$","g")}.apply(t,r))||(e.exports=o)},3764:(e,t,n)=>{var r,o;r=[n(7692)],void 0===(o=function(e){"use strict";return e.slice}.apply(t,r))||(e.exports=o)},610:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return{}}.call(t,n,t,e))||(e.exports=r)},2203:(e,t,n)=>{var r,o;r=[n(3967)],void 0===(o=function(e){"use strict";return e.toString}.apply(t,r))||(e.exports=o)},9098:(e,t,n)=>{var r;void 0===(r=function(){"use strict";return"[\\x20\\t\\r\\n\\f]"}.call(t,n,t,e))||(e.exports=r)},1201:(e,t,n)=>{var r,o;r=[n(9701),n(7349),n(2846),n(6867),n(6784)],void 0===(o=function(e,t){"use strict";return e.fn.extend({wrapAll:function(n){var r;return this[0]&&(t(n)&&(n=n.call(this[0])),r=e(n,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&r.insertBefore(this[0]),r.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(n){return t(n)?this.each((function(t){e(this).wrapInner(n.call(this,t))})):this.each((function(){var t=e(this),r=t.contents();r.length?r.wrapAll(n):t.append(n)}))},wrap:function(n){var r=t(n);return this.each((function(t){e(this).wrapAll(r?n.call(this,t):n)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){e(this).replaceWith(this.childNodes)})),this}}),e}.apply(t,r))||(e.exports=o)},1378:e=>{var t=1e3,n=60*t,r=60*n,o=24*r;function i(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,s){s=s||{};var a,c,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var s=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*o;case"hours":case"hour":case"hrs":case"hr":case"h":return s*r;case"minutes":case"minute":case"mins":case"min":case"m":return s*n;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===u&&isFinite(e))return s.long?(a=e,(c=Math.abs(a))>=o?i(a,c,o,"day"):c>=r?i(a,c,r,"hour"):c>=n?i(a,c,n,"minute"):c>=t?i(a,c,t,"second"):a+" ms"):function(e){var i=Math.abs(e);return i>=o?Math.round(e/o)+"d":i>=r?Math.round(e/r)+"h":i>=n?Math.round(e/n)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},4024:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasCORS=void 0;let n=!1;try{n="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}t.hasCORS=n},5416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0,t.encode=function(e){let t="";for(let n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){let t={},n=e.split("&");for(let e=0,r=n.length;e<r;e++){let r=n[e].split("=");t[decodeURIComponent(r[0])]=decodeURIComponent(r[1])}return t}},9869:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=void 0;const n=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,r=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.parse=function(e){const t=e,o=e.indexOf("["),i=e.indexOf("]");-1!=o&&-1!=i&&(e=e.substring(0,o)+e.substring(o,i).replace(/:/g,";")+e.substring(i,e.length));let s=n.exec(e||""),a={},c=14;for(;c--;)a[r[c]]=s[c]||"";return-1!=o&&-1!=i&&(a.source=t,a.host=a.host.substring(1,a.host.length-1).replace(/;/g,":"),a.authority=a.authority.replace("[","").replace("]","").replace(/;/g,":"),a.ipv6uri=!0),a.pathNames=function(e,t){const n=t.replace(/\/{2,9}/g,"/").split("/");return"/"!=t.slice(0,1)&&0!==t.length||n.splice(0,1),"/"==t.slice(-1)&&n.splice(n.length-1,1),n}(0,a.path),a.queryKey=function(e,t){const n={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,r){t&&(n[t]=r)})),n}(0,a.query),a}},6294:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.yeast=t.decode=t.encode=void 0;const n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={};let o,i=0,s=0;function a(e){let t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}for(t.encode=a,t.decode=function(e){let t=0;for(s=0;s<e.length;s++)t=64*t+r[e.charAt(s)];return t},t.yeast=function(){const e=a(+new Date);return e!==o?(i=0,o=e):e+"."+a(i++)};s<64;s++)r[n[s]]=s},7307:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.globalThisShim=void 0,t.globalThisShim="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},1473:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.nextTick=t.parse=t.installTimerFunctions=t.transports=t.Transport=t.protocol=t.Socket=void 0;const r=n(3091);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return r.Socket}}),t.protocol=r.Socket.protocol;var o=n(5817);Object.defineProperty(t,"Transport",{enumerable:!0,get:function(){return o.Transport}});var i=n(8508);Object.defineProperty(t,"transports",{enumerable:!0,get:function(){return i.transports}});var s=n(8719);Object.defineProperty(t,"installTimerFunctions",{enumerable:!0,get:function(){return s.installTimerFunctions}});var a=n(9869);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return a.parse}});var c=n(6089);Object.defineProperty(t,"nextTick",{enumerable:!0,get:function(){return c.nextTick}})},3091:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const o=n(8508),i=n(8719),s=n(5416),a=n(9869),c=r(n(5130)),u=n(7416),l=n(7385),p=(0,c.default)("engine.io-client:socket");class d extends u.Emitter{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=(0,a.parse)(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=(0,a.parse)(t.host).host),(0,i.installTimerFunctions)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=(0,s.decode)(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){p('creating transport "%s"',e);const t=Object.assign({},this.opts.query);t.EIO=l.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return p("options: %j",n),new o.transports[e](n)}open(){let e;if(this.opts.rememberUpgrade&&d.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return p("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){p("setting transport %s",e.name),this.transport&&(p("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(e=>this.onClose("transport close",e)))}probe(e){p('probing transport "%s"',e);let t=this.createTransport(e),n=!1;d.priorWebsocketSuccess=!1;const r=()=>{n||(p('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(p('probe transport "%s" pong',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;d.priorWebsocketSuccess="websocket"===t.name,p('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(p("changing transport and sending upgrade packet"),u(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{p('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emitReserved("upgradeError",n)}})))};function o(){n||(n=!0,u(),t.close(),t=null)}const i=n=>{const r=new Error("probe error: "+n);r.transport=t.name,o(),p('probe transport "%s" failed because of error: %s',e,n),this.emitReserved("upgradeError",r)};function s(){i("transport closed")}function a(){i("socket closed")}function c(e){t&&e.name!==t.name&&(p('"%s" works - aborting "%s"',e.name,t.name),o())}const u=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",s),this.off("close",a),this.off("upgrading",c)};t.once("open",r),t.once("error",i),t.once("close",s),this.once("close",a),this.once("upgrading",c),t.open()}onOpen(){if(p("socket open"),this.readyState="open",d.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){p("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(p('socket receive: type "%s", data "%s"',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else p('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();p("flushing %d packets in socket",e.length),this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let t=0;t<this.writeBuffer.length;t++){const n=this.writeBuffer[t].data;if(n&&(e+=(0,i.byteLength)(n)),t>0&&e>this.maxPayload)return p("only send %d out of %d packets",t,this.writeBuffer.length),this.writeBuffer.slice(0,t);e+=2}return p("payload size is %d (max: %d)",e,this.maxPayload),this.writeBuffer}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emitReserved("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),p("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){p("socket error %j",e),d.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(p('socket close with reason: "%s"',e),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}t.Socket=d,d.protocol=l.protocol},5817:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Transport=void 0;const o=n(7385),i=n(7416),s=n(8719),a=(0,r(n(5130)).default)("engine.io-client:transport");class c extends Error{constructor(e,t,n){super(e),this.description=t,this.context=n,this.type="TransportError"}}class u extends i.Emitter{constructor(e){super(),this.writable=!1,(0,s.installTimerFunctions)(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t,n){return super.emitReserved("error",new c(e,t,n)),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):a("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=(0,o.decodePacket)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}}t.Transport=u},8508:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transports=void 0;const r=n(6788),o=n(8948);t.transports={websocket:o.WS,polling:r.Polling}},6788:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.Polling=void 0;const o=n(5817),i=r(n(5130)),s=n(6294),a=n(5416),c=n(7385),u=n(3566),l=n(7416),p=n(8719),d=n(7307),f=(0,i.default)("engine.io-client:polling");function h(){}const g=null!=new u.XHR({xdomain:!1}).responseType;class y extends o.Transport{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=g&&!t}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{f("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(f("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){f("pre-pause polling complete"),--e||t()}))),this.writable||(f("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){f("pre-pause writing complete"),--e||t()})))}else t()}poll(){f("polling"),this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){f("polling got data %s",e),(0,c.decodePayload)(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState?this.poll():f('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{f("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(f("transport open - closing"),e()):(f("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,(0,c.encodePayload)(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,s.yeast)()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const r=(0,a.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new v(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",((e,t)=>{this.onError("xhr post error",e,t)}))}doPoll(){f("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,t)=>{this.onError("xhr poll error",e,t)})),this.pollXhr=e}}t.Polling=y;class v extends l.Emitter{constructor(e,t){super(),(0,p.installTimerFunctions)(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=(0,p.pick)(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new u.XHR(e);try{f("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},f("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=v.requestsCount++,v.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=h,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete v.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(t.Request=v,v.requestsCount=0,v.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",m);else if("function"==typeof addEventListener){const e="onpagehide"in d.globalThisShim?"pagehide":"unload";addEventListener(e,m,!1)}function m(){for(let e in v.requests)v.requests.hasOwnProperty(e)&&v.requests[e].abort()}},6089:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.defaultBinaryType=t.usingBrowserWebSocket=t.WebSocket=t.nextTick=void 0;const r=n(7307);t.nextTick="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),t.WebSocket=r.globalThisShim.WebSocket||r.globalThisShim.MozWebSocket,t.usingBrowserWebSocket=!0,t.defaultBinaryType="arraybuffer"},8948:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WS=void 0;const o=n(5817),i=n(5416),s=n(6294),a=n(8719),c=n(6089),u=r(n(5130)),l=n(7385),p=(0,u.default)("engine.io-client:websocket"),d="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends o.Transport{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=d?{}:(0,a.pick)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=c.usingBrowserWebSocket&&!d?t?new c.WebSocket(e,t):new c.WebSocket(e):new c.WebSocket(e,t,n)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType||c.defaultBinaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;(0,l.encodePacket)(n,this.supportsBinary,(e=>{const t={};!c.usingBrowserWebSocket&&(n.options&&(t.compress=n.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{c.usingBrowserWebSocket?this.ws.send(e):this.ws.send(e,t)}catch(e){p("websocket closed before onclose event")}r&&(0,c.nextTick)((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,s.yeast)()),this.supportsBinary||(e.b64=1);const r=(0,i.encode)(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}check(){return!!c.WebSocket}}t.WS=f},3566:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.XHR=void 0;const r=n(4024),o=n(7307);t.XHR=function(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||r.hasCORS))return new XMLHttpRequest}catch(e){}if(!t)try{return new(o.globalThisShim[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},8719:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.byteLength=t.installTimerFunctions=t.pick=void 0;const r=n(7307);t.pick=function(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})};const o=setTimeout,i=clearTimeout;t.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=o.bind(r.globalThisShim),e.clearTimeoutFn=i.bind(r.globalThisShim)):(e.setTimeoutFn=setTimeout.bind(r.globalThisShim),e.clearTimeoutFn=clearTimeout.bind(r.globalThisShim))},t.byteLength=function(e){return"string"==typeof e?function(e){let t=0,n=0;for(let r=0,o=e.length;r<o;r++)t=e.charCodeAt(r),t<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(r++,n+=4);return n}(e):Math.ceil(1.33*(e.byteLength||e.size))}},7950:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_PACKET=t.PACKET_TYPES_REVERSE=t.PACKET_TYPES=void 0;const n=Object.create(null);t.PACKET_TYPES=n,n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";const r=Object.create(null);t.PACKET_TYPES_REVERSE=r,Object.keys(n).forEach((e=>{r[n[e]]=e})),t.ERROR_PACKET={type:"error",data:"parser error"}},6640:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decode=t.encode=void 0;const n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",r="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<n.length;e++)r[n.charCodeAt(e)]=e;t.encode=e=>{let t,r=new Uint8Array(e),o=r.length,i="";for(t=0;t<o;t+=3)i+=n[r[t]>>2],i+=n[(3&r[t])<<4|r[t+1]>>4],i+=n[(15&r[t+1])<<2|r[t+2]>>6],i+=n[63&r[t+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},t.decode=e=>{let t,n,o,i,s,a=.75*e.length,c=e.length,u=0;"="===e[e.length-1]&&(a--,"="===e[e.length-2]&&a--);const l=new ArrayBuffer(a),p=new Uint8Array(l);for(t=0;t<c;t+=4)n=r[e.charCodeAt(t)],o=r[e.charCodeAt(t+1)],i=r[e.charCodeAt(t+2)],s=r[e.charCodeAt(t+3)],p[u++]=n<<2|o>>4,p[u++]=(15&o)<<4|i>>2,p[u++]=(3&i)<<6|63&s;return l}},6559:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(7950),o=n(6640),i="function"==typeof ArrayBuffer,s=(e,t)=>{if(i){const n=(0,o.decode)(e);return a(n,t)}return{base64:!0,data:e}},a=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e;t.default=(e,t)=>{if("string"!=typeof e)return{type:"message",data:a(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:s(e.substring(1),t)}:r.PACKET_TYPES_REVERSE[n]?e.length>1?{type:r.PACKET_TYPES_REVERSE[n],data:e.substring(1)}:{type:r.PACKET_TYPES_REVERSE[n]}:r.ERROR_PACKET}},5916:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(7950),o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,s=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};t.default=({type:e,data:t},n,a)=>{return o&&t instanceof Blob?n?a(t):s(t,a):i&&(t instanceof ArrayBuffer||(c=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?n?a(t):s(new Blob([t]),a):a(r.PACKET_TYPES[e]+(t||""));var c}},7385:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePayload=t.decodePacket=t.encodePayload=t.encodePacket=t.protocol=void 0;const r=n(5916);t.encodePacket=r.default;const o=n(6559);t.decodePacket=o.default;const i=String.fromCharCode(30);t.encodePayload=(e,t)=>{const n=e.length,o=new Array(n);let s=0;e.forEach(((e,a)=>{(0,r.default)(e,!1,(e=>{o[a]=e,++s===n&&t(o.join(i))}))}))},t.decodePayload=(e,t)=>{const n=e.split(i),r=[];for(let e=0;e<n.length;e++){const i=(0,o.default)(n[e],t);if(r.push(i),"error"===i.type)break}return r},t.protocol=4},3137:(e,t)=>{"use strict";function n(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}Object.defineProperty(t,"__esModule",{value:!0}),t.Backoff=void 0,t.Backoff=n,n.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},n.prototype.reset=function(){this.attempts=0},n.prototype.setMin=function(e){this.ms=e},n.prototype.setMax=function(e){this.max=e},n.prototype.setJitter=function(e){this.jitter=e}},6580:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.connect=t.io=t.Socket=t.Manager=t.protocol=void 0;const o=n(5702),i=n(5734);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return i.Manager}});const s=n(9189);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return s.Socket}});const a=r(n(5130)).default("socket.io-client"),c={};function u(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=o.url(e,t.path||"/socket.io"),r=n.source,s=n.id,u=n.path,l=c[s]&&u in c[s].nsps;let p;return t.forceNew||t["force new connection"]||!1===t.multiplex||l?(a("ignoring socket cache for %s",r),p=new i.Manager(r,t)):(c[s]||(a("new io instance for %s",r),c[s]=new i.Manager(r,t)),p=c[s]),n.query&&!t.query&&(t.query=n.queryKey),p.socket(n.path,t)}t.io=u,t.connect=u,t.default=u,Object.assign(u,{Manager:i.Manager,Socket:s.Socket,io:u,connect:u});var l=n(6642);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return l.protocol}}),e.exports=u},5734:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const a=n(1473),c=n(9189),u=i(n(6642)),l=n(6166),p=n(3137),d=n(7416),f=s(n(5130)).default("socket.io-client:manager");class h extends d.Emitter{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,a.installTimerFunctions(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=t.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new p.Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||u;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(f("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;f("opening %s",this.uri),this.engine=new a.Socket(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=l.on(t,"open",(function(){n.onopen(),e&&e()})),o=l.on(t,"error",(t=>{f("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;f("connect attempt will timeout after %d",e),0===e&&r();const n=this.setTimeoutFn((()=>{f("connect attempt timed out after %d",e),r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){f("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(l.on(e,"ping",this.onping.bind(this)),l.on(e,"data",this.ondata.bind(this)),l.on(e,"error",this.onerror.bind(this)),l.on(e,"close",this.onclose.bind(this)),l.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){try{this.decoder.add(e)}catch(e){this.onclose("parse error",e)}}ondecoded(e){a.nextTick((()=>{this.emitReserved("packet",e)}),this.setTimeoutFn)}onerror(e){f("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new c.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void f("socket %s is still active, skipping close",e);this._close()}_packet(e){f("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){f("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){f("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){f("closed due to %s",e),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)f("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();f("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(f("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(f("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(f("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=h},6166:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},9189:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const o=n(6642),i=n(6166),s=n(7416),a=r(n(5130)).default("socket.io-client:socket"),c=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class u extends s.Emitter{constructor(e,t,n){super(),this.connected=!1,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",this.onopen.bind(this)),i.on(e,"packet",this.onpacket.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(c.hasOwnProperty(e))throw new Error('"'+e.toString()+'" is a reserved event name');t.unshift(e);const n={type:o.PacketType.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;a("emitting packet with ack id %d",e);const r=t.pop();this._registerAckCallback(e,r),n.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?(this.notifyOutgoingListeners(n),this.packet(n)):this.sendBuffer.push(n):a("discard packet as the transport is not currently writable"),this.flags={},this}_registerAckCallback(e,t){const n=this.flags.timeout;if(void 0===n)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(a("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));a("event with ack id %d has timed out after %d ms",e,n),t.call(this,new Error("operation has timed out"))}),n);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){a("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:o.PacketType.CONNECT,data:e})})):this.packet({type:o.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){a("close (%s)",e),this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case o.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case o.PacketType.EVENT:case o.PacketType.BINARY_EVENT:this.onevent(e);break;case o.PacketType.ACK:case o.PacketType.BINARY_ACK:this.onack(e);break;case o.PacketType.DISCONNECT:this.ondisconnect();break;case o.PacketType.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];a("emitting event %j",t),null!=e.id&&(a("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,a("sending ack %j",r),t.packet({type:o.PacketType.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(a("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):a("bad ack %s",e.id)}onconnect(e){a("socket connected with id %s",e),this.id=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){a("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(a("performing disconnect (%s)",this.nsp),this.packet({type:o.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const n of t)n.apply(this,e.data)}}}t.Socket=u},5702:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const o=n(1473),i=r(n(5130)).default("socket.io-client:url");t.url=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),i("parse %s",e),r=o.parse(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const s=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+s+":"+r.port+t,r.href=r.protocol+"://"+s+(n&&n.port===r.port?"":":"+r.port),r}},3406:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(5648);function o(e,t){if(!e)return e;if(r.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=o(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=o(e[r],t));return n}return e}function i(e,t){if(!e)return e;if(e&&!0===e._placeholder){if("number"==typeof e.num&&e.num>=0&&e.num<t.length)return t[e.num];throw new Error("illegal attachments")}if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=i(e[n],t);else if("object"==typeof e)for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=i(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=o(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=i(e.data,t),e.attachments=void 0,e}},6642:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(7416),o=n(3406),i=n(5648),s=n(5130).default("socket.io-parser");var a;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(a=t.PacketType||(t.PacketType={})),t.Encoder=class{constructor(e){this.replacer=e}encode(e){return s("encoding packet %j",e),e.type!==a.EVENT&&e.type!==a.ACK||!i.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===a.EVENT?a.BINARY_EVENT:a.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==a.BINARY_EVENT&&e.type!==a.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),s("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=o.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class c extends r.Emitter{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(e),t.type===a.BINARY_EVENT||t.type===a.BINARY_ACK?(this.reconstructor=new u(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else{if(!i.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===a[n.type])throw new Error("unknown packet type "+n.type);if(n.type===a.BINARY_EVENT||n.type===a.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=this.tryParse(e.substr(t));if(!c.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return s("decoded %s as %j",e,n),n}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case a.CONNECT:return"object"==typeof t;case a.DISCONNECT:return void 0===t;case a.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case a.EVENT:case a.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case a.ACK:case a.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=c;class u{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},5648:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function s(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||o&&e instanceof Blob||i&&e instanceof File}t.isBinary=s,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(s(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}},7416:(e,t,n)=>{"use strict";function r(e){if(e)return function(e){for(var t in r.prototype)e[t]=r.prototype[t];return e}(e)}n.r(t),n.d(t,{Emitter:()=>r}),r.prototype.on=r.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},r.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},r.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},r.prototype.emitReserved=r.prototype.emit,r.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},r.prototype.hasListeners=function(e){return!!this.listeners(e).length}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";const e=function(e){var t=e.querySelector("a");this.button=null!=t?t:e,this.visibleElement=e};var t;!function(e){e.Row="ROW",e.Col="COL",e.Grid="GRID"}(t||(t={}));const r=function(e,n,r,o){var i=this;this.initialize=function(){return e=i,t=void 0,r=function(){var e;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,r=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(t){switch(t.label){case 0:return e=this,[4,this.generatorFunction()];case 1:return e.grid=t.sent(),[2]}}))},new((n=void 0)||(n=Promise))((function(o,i){function s(e){try{c(r.next(e))}catch(e){i(e)}}function a(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((r=r.apply(e,t||[])).next())}));var e,t,n,r},this.get=function(e,n){return i.type===t.Grid?i.grid[n][e]:i.type===t.Col?i.grid[n]:i.grid[e]},this.generatorFunction=e,this.type=n,r&&(this.scrollOffset=r),this.resetOnClick=o},o=function(){function e(e){var n=this;this.handleFirstMovement=function(){n.hover(),n.active=!0},this.resetGrid=function(){n._unhover(),n.x=0,n.y=0,n.gridX=0,n.gridY=0,n.active=!1},this.moveDown=function(){if(n.active){var e=n,r=e.x,o=e.y,i=e.gridX,s=e.gridY,a=e.grids;n._unhover();var c=a[s][i];c.type===t.Col&&o+1<c.grid.length||c.type==t.Grid&&o+1<c.grid.length?(console.log("normal"),n.y=o+1,r>=c.grid[n.y].length&&(n.x=c.grid[n.y].length-1)):(console.log("else"),s+1<a.length?n.gridY++:n.gridY=0,n.y=0,n.x=0),n.hover()}else n.handleFirstMovement()},this.moveUp=function(){if(n.active){var e=n,t=e.x,r=e.y,o=e.gridX,i=e.gridY,s=e.grids;n._unhover();var a=s[i][o];r>0?(n.y=r-1,t>=a.grid[n.y].length&&(n.x=a.grid[n.y].length-1)):(n.gridY=0==i?s.length-1:i-1,n.y=0,n.x=0),n.hover()}else n.handleFirstMovement()},this.moveRight=function(){if(n.active){var e=n,r=e.x,o=e.y,i=e.gridX,s=e.gridY,a=e.grids;n._unhover();var c=a[s][i];c.type===t.Row&&r+1<c.grid.length||c.type===t.Grid&&r+1<c.grid[o].length?(n.x=r+1,o>=c.grid.length&&(n.y=c.grid.length-1)):(i+1<a[s].length?n.gridX++:n.gridX=0,n.y=0,n.x=0),n.hover()}else n.handleFirstMovement()},this.moveLeft=function(){if(n.active){var e=n,t=e.x,r=e.y,o=e.gridX,i=e.gridY,s=e.grids;n._unhover();var a=s[i][o];0!==t?(console.log("normal"),n.x=t-1,r>=a.grid.length&&(n.y=a.grid.length-1)):(console.log("else"),n.gridX=0==o?s[i].length-1:o-1,n.y=0,n.x=0),n.hover()}else n.handleFirstMovement()},this.grids=e,this.y=0,this.x=0,this.gridX=0,this.gridY=0}return e.prototype._unhover=function(){var e=this,t=e.x,n=e.y,r=e.gridX,o=e.gridY,i=e.grids[o][r];i.initialize(),i.get(t,n).visibleElement.classList.remove("hover-style")},e.prototype.hover=function(){var e=this,t=e.x,n=e.y,r=e.gridX,o=e.gridY,i=e.grids[o][r],s=i.get(t,n),a=i.scrollOffset;if(a){var c=s.visibleElement.getBoundingClientRect().top+window.pageYOffset-a;window.scrollTo({top:c,behavior:"smooth"})}else s.visibleElement.scrollIntoView({behavior:"smooth"});s.visibleElement.classList.add("hover-style")},e.prototype.click=function(){var e=this,t=e.x,n=e.y,r=e.gridX,o=e.gridY,i=e.grids;e.active&&(i[o][r].get(t,n).button.click(),console.log("grids"),console.log(i),i[o][r].resetOnClick&&this.resetGrid())},e}();n(6736),n(6931);const{io:i}=n(6580),s={key:void 0,isLoaded:!1,socket:i("ws://localhost:3000")};!async function(){console.log("handleKeyLoading"),new Promise((e=>{const t=setInterval((()=>{console.log("start of key interval"),s.key&&(clearInterval(t),function(e){const t="control-"+s.key;console.log("listening for "+t),e.on(t,(e=>{const{socket:t}=s;switch(console.log(e),console.log("click"),console.log(a.GridHandler),console.log("socket: "),console.log(s.socketsocket),e.control){case"up":a.GridHandler.moveUp();break;case"down":a.GridHandler.moveDown();break;case"left":a.GridHandler.moveLeft();break;case"right":a.GridHandler.moveRight();break;case"click":a.GridHandler.click(),u(c);break;case"togglePlay":const n=function(){const e=document.querySelector("video");return e.paused?e.ended?void 0:(e.play(),"playing"):(e.pause(),"paused")}();t.emit("control-response",{type:"video-status",status:n});break;case"toggleFullscreen":!function(){const e=document.querySelector("video"),t=e.fullscreenElement;console.log("is fullscreen?"),console.log(t),console.log("chromechromechrome"),e.requestFullscreen()}();break;case"toggleMute":!function(e){const t="m".toUpperCase().charCodeAt(0);console.log("keycode: "+t);const n=new KeyboardEvent("keydown",{keyCode:t});document.dispatchEvent(n)}();break;case"toggleSidebar":console.log(a.toggleSidebar),u(a.toggleSidebar);break;case"scrollToTop":document.body.scrollTop=document.documentElement.scrollTop=0,a.GridHandler.resetGrid();break;default:t.emit("control-response",{type:"error",error:"unknown control "+e.movement})}}))}(s.socket),e(!0))}),1e3)}))}();const a=new class{GridHandler=void 0;hasSidebar=void 0;sidebarHandler=void 0;sidebarActive=!1;constructor(){}getSidebarButtons=async()=>new Promise((t=>{let n,r;const o=setInterval((()=>{n=document.querySelectorAll("ytd-guide-entry-renderer"),n.length?(console.log(n),console.log("sidebar found "+n.length),clearInterval(o),r=[...n].filter((e=>!0)).map((t=>new e(t))),t(r)):console.log("waiting for sidebar")}),500)}));getMainVideos=async()=>new Promise((t=>{let n,r=[];const o=setInterval((()=>{n=document.querySelectorAll("ytd-rich-grid-row, ytd-rich-section-renderer"),n.length?(console.log("mainButtons found"),n.forEach((t=>{const n=[...t.querySelectorAll("ytd-rich-item-renderer")].filter((e=>0==e.querySelectorAll("ytd-ad-slot-renderer").length)).map((t=>new e(t)));r.push(n)})),clearInterval(o),t(r)):console.log("waiting for mainButtons")}),500)}));getSidebarVideos=async()=>new Promise((t=>{let n,r;const o=setInterval((()=>{n=document.querySelectorAll("#contents ytd-compact-video-renderer"),n.length?(console.log("sidebar found "+n.length),clearInterval(o),r=[...n].filter((e=>!0)).map((t=>new e(t))),t(r)):console.log("waiting for sidebar")}),500)}));getPaperTabs=async()=>new Promise((t=>{let n,r;const o=setInterval((()=>{n=document.querySelectorAll("#tabsContent tp-yt-paper-tab"),n.length?(console.log("paperTabs found "+n.length),clearInterval(o),r=[...n].filter((e=>!0)).map((t=>new e(t))),r.pop(),console.log("papertabs "),console.log(r),t(r)):console.log("waiting for paperTabs")}),500)}));getChannelButtons=async()=>new Promise((t=>{let n,r=[];const o=setInterval((()=>{document.querySelectorAll("#scroll-container").length?(n=document.querySelectorAll("#scroll-container"),console.log("mainButtons found "+n.length),n.forEach((t=>{console.log("row"),console.log(t);const n=[...t.querySelectorAll("div ytd-grid-video-renderer, ytd-grid-channel-renderer")].map((t=>new e(t)));r.push(n)})),clearInterval(o),t(r)):document.querySelectorAll("ytd-rich-grid-row").length?(n=document.querySelectorAll("ytd-rich-grid-row"),n.forEach((t=>{const n=[...t.querySelectorAll("ytd-rich-item-renderer")].map((t=>new e(t)));r.push(n)}))):document.querySelectorAll("ytd-item-section-renderer").length&&(n=document.querySelectorAll("ytd-item-section-renderer")),n&&t(r)}),500)}));loadButtons1=async()=>{this.hasSidebar=!1;const e=new r(this.getSidebarButtons,t.Col,0);await e.initialize();const n=new r(this.getMainVideos,t.Grid,150);await n.initialize(),this.GridHandler=new o([[e,n]]),console.log(this.GridHandler),console.log("finished loading buttons")};loadButtons2=async()=>{this.hasSidebar=!0;const e=new r(this.getSidebarVideos,t.Col,70);await e.initialize(),this.GridHandler=new o([[e]])};loadButtons3=async()=>{this.hasSidebar=!0;const e=new r(this.getPaperTabs,t.Row,70,!0);await e.initialize();const n=new r(this.getChannelButtons,t.Grid,70);await n.initialize();const i=new r(this.getSidebarButtons,t.Col,0);await i.initialize(),this.GridHandler=new o([[i,e],[i,n]]),console.log(this.GridHandler),console.log("finished loading buttons")};playNextVideo=()=>{document.querySelector(".ytp-next-button").click()};toggleSidebar=async()=>{if(console.log("toggle sidebar"),this.hasSidebar)if(console.log(document.querySelectorAll("#guide-button #button.style-scope.yt-icon-button")),document.querySelectorAll("#guide-button #button.style-scope.yt-icon-button")[0].click(),this.sidebarActive=!this.sidebarActive,this.sidebarActive)if(this.GridHandler.resetGrid(),this.mainGrid=this.GridHandler,this.sidebarGrid)this.GridHandler=this.sidebarGrid;else{const e=new r(this.getSidebarButtons,t.Col,0);await e.initialize(),this.GridHandler=new o([[e]])}else this.GridHandler=this.mainGrid,this.GridHandler.resetGrid()}};async function c(){const e=window.location.toString().match(/youtube.com\/(watch|feed|shorts|@|)/)[1];switch(console.log("match: "),console.log(e),e){case"watch":console.log("watch"),await a.loadButtons2();break;case"feed":console.log("feed"),await a.loadButtons1();break;case"shorts":console.log("shorts");break;case"@":console.log("channel"),await a.loadButtons3();break;default:console.log("default"),await a.loadButtons1()}}async function u(e){const{socket:t}=s;t.emit("load-status",{isLoaded:!1}),await e(),t.emit("load-status",{isLoaded:!0})}c(),chrome.runtime.onMessage.addListener((function(e,t,n){console.log(t.tab?"from a content script:"+t.tab.url:"from the extension"),console.log(e),e.key&&(s.key=e.key,n({success:!0}),console.log("new key: "+s.key))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,